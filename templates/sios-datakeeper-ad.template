{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of a Windows based Application infrastructure. It installs 2 Active Directory Domain Controllers into subnets in separate AZs inside a VPC, as well as Remote Desktop Gateway and NAT instances into the DMZ for each Availability Zone. The default Domain Administrator password will be the one retrieved from the instance.  For adding members to the domain, ensure that they are launched into the domain member security group created by this template and then configure them to use the AD instances fixed private IP addresses as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
				"Label": {
					"default": "VPC Network Configuration"
				},
				"Parameters": [
					"VPCID",
					"VPCCIDR",
					"PrivateSubnet1AID",
					"PrivateSubnet1ACIDR",
					"PrivateSubnet2AID",
					"PrivateSubnet2ACIDR",
					"PublicSubnet1ID",
					"PublicSubnet1CIDR",
					"PublicSubnet2ID",
					"PublicSubnet2CIDR"
				]
			}, {
				"Label": {
					"default": "Active Directory Configuration"
				},
				"Parameters": [
					"RDGWCIDR",
					"FullyQualifiedDomainName",
					"DomainNetBIOSName",
					"DomainAdminUser",
					"DomainAdminPassword"
				]
			}, {
				"Label": {
					"default": "AD Server Configuration"
				},
				"Parameters": [
					"KeyPairName",
					"RDGWInstanceType",
					"AD1NetBIOSName",
					"AD1InstanceType",
					"AD1PrivateIp",
					"AD2NetBIOSName",
					"AD2InstanceType",
					"AD2PrivateIp"
				]
			}]
		}
	},
	"Parameters": {
		"KeyPairName": {
			"Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"AD1NetBIOSName": {
			"Description": "NetBIOS name of the 1st AD Server (up to 15 characters)",
			"Type": "String",
			"Default": "DC1",
			"MinLength": "1",
			"MaxLength": "15",
			"AllowedPattern": "[a-zA-Z0-9]+"
		},
		"AD1InstanceType": {
			"Description": "Amazon EC2 instance type for the first Active Directory Instance",
			"Type": "String",
			"Default": "m4.large",
			"AllowedValues": [
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge"
			]
		},
		"AD1PrivateIp": {
			"Description": "Fixed private IP for the first Active Directory server located in AZ1",
			"Type": "String",
			"Default": "10.0.0.10"
		},
		"AD2NetBIOSName": {
			"Description": "NetBIOS name of the 2nd AD Server (up to 15 characters)",
			"Type": "String",
			"Default": "DC2",
			"MinLength": "1",
			"MaxLength": "15",
			"AllowedPattern": "[a-zA-Z0-9]+"
		},
		"AD2InstanceType": {
			"Description": "Amazon EC2 instance type for the second Active Directory Instance",
			"Type": "String",
			"Default": "m4.large",
			"AllowedValues": [
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge"
			]
		},
		"AD2PrivateIp": {
			"Description": "Fixed private IP for the second Active Directory serverr located in AZ2",
			"Type": "String",
			"Default": "10.0.32.10"
		},
		"RDGWInstanceType": {
			"Description": "Amazon EC2 instance type for the Remote Desktop Gatweway Instances",
			"Type": "String",
			"Default": "m4.large",
			"AllowedValues": [
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge"
			]
		},
		"FullyQualifiedDomainName": {
			"Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
			"Type": "String",
			"Default": "datakeeper.local",
			"MinLength": "3",
			"MaxLength": "25",
			"AllowedPattern": "[a-zA-Z0-9]+\\..+"
		},
		"DomainNetBIOSName": {
			"Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE",
			"Type": "String",
			"Default": "datakeeper",
			"MinLength": "1",
			"MaxLength": "15",
			"AllowedPattern": "[a-zA-Z0-9]+"
		},
		"DomainAdminUser": {
			"Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
			"Type": "String",
			"Default": "siosadmin",
			"MinLength": "5",
			"MaxLength": "25",
			"AllowedPattern": "[a-zA-Z0-9]*"
		},
		"DomainAdminPassword": {
			"Description": "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
			"Type": "String",
			"Default": "SIOS!5105",
			"MinLength": "8",
			"MaxLength": "32",
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"NoEcho": "true"
		},
		"PublicSubnet1ID": {
			"Description": "ID for the the Public Subnet located in AZ1",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PublicSubnet1CIDR": {
			"Description": "CIDR Block for the Public Subnet located in AZ1",
			"Type": "String",
			"Default": "10.0.128.0/20",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
		},
		"PublicSubnet2ID": {
			"Description": "ID for the the Public Subnet located in AZ2",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PublicSubnet2CIDR": {
			"Description": "CIDR Block for the Public Subnet located in AZ2",
			"Type": "String",
			"Default": "10.0.144.0/20",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
		},
		"PrivateSubnet1AID": {
			"Description": "ID for the the Private Subnet located in AZ1",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PrivateSubnet1ACIDR": {
			"Description": "CIDR Block for Private Subnet located in AZ1",
			"Type": "String",
			"Default": "10.0.0.0/19",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
		},
		"PrivateSubnet2AID": {
			"Description": "ID for the the Private Subnet located in AZ2",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PrivateSubnet2ACIDR": {
			"Description": "CIDR Block for Private Subnet located in AZ2",
			"Type": "String",
			"Default": "10.0.32.0/19",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
		},
		"RDGWCIDR": {
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
			"Description": "Allowed CIDR Block for external access to the Remote Desktop Gateways",
			"Type": "String"
		},
		"VPCID": {
			"Description": "ID for the VPC",
			"Type": "AWS::EC2::VPC::Id"
		},
		"VPCCIDR": {
			"Description": "CIDR Block for the VPC",
			"Type": "String",
			"Default": "10.0.0.0/16",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
		}
	},
	"Mappings": {
		"AWSAMIRegionMap": {
			"AMI": {
				"WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.01.11"
			},
			"ap-northeast-1": {
				"WS2012R2": "ami-7accbe1d"
			},
			"ap-northeast-2": {
				"WS2012R2": "ami-e979af87"
			},
			"ap-south-1": {
				"WS2012R2": "ami-31a6d05e"
			},
			"ap-southeast-1": {
				"WS2012R2": "ami-89e74cea"
			},
			"ap-southeast-2": {
				"WS2012R2": "ami-059d9866"
			},
			"ca-central-1": {
				"WS2012R2": "ami-7805b71c"
			},
			"eu-central-1": {
				"WS2012R2": "ami-6f559800"
			},
			"eu-west-1": {
				"WS2012R2": "ami-dd9eb6ae"
			},
			"eu-west-2": {
				"WS2012R2": "ami-738a8017"
			},
			"sa-east-1": {
				"WS2012R2": "ami-f4d84298"
			},
			"us-east-1": {
				"WS2012R2": "ami-abf616bd"
			},
			"us-east-2": {
				"WS2012R2": "ami-c06d48a5"
			},
			"us-west-1": {
				"WS2012R2": "ami-76227116"
			},
			"us-west-2": {
				"WS2012R2": "ami-1562d075"
			}
		}
	},
	"Resources": {
		"RdgwEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "RDGateway"
				}
			}
		},
		"Rdgw2EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "RDGateway2"
				}
			}
		},
		"DomainController": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"setup",
							"rename",
							"installADDS",
							"configureSites",
							"installADCS",
							"finalize"
						]
					},
					"setup": {
						"files": {
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackName"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.DomainController.Metadata.AWS::CloudFormation::Init\n",
											"action=cfn-init.exe -v -c config -s ", {
												"Ref": "AWS::StackId"
											},
											" -r DomainController",
											" --region ", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\Set-StaticIP.ps1": {
								"content": {
									"Fn::Join": [
										"", [
											"$netip = Get-NetIPConfiguration;",
											"$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
											"Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
											"Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/ConvertTo-EnterpriseAdmin.ps1"
							},
							"c:\\cfn\\scripts\\New-CertificateAuthority.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/New-CertificateAuthority.ps1"
							},
							"c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/xAdcsDeployment_0.1.0.0.zip"
							},
							"c:\\cfn\\scripts\\Unzip-Archive.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/Unzip-Archive.ps1"
							}
						},
						"services": {
							"windows": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"c:\\cfn\\cfn-hup.conf",
										"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
									]
								}
							}
						},
						"commands": {
							"a-disable-win-fw": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-set-execution-policy": {
								"command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
								"waitAfterCompletion": "0"
							},
							"c-unpack-dsc-resource": {
								"command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules'",
								"waitAfterCompletion": "0"
							}
						}
					},
					"rename": {
						"commands": {
							"a-set-static-ip": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
										]
									]
								},
								"waitAfterCompletion": "45"
							},
							"b-execute-powershell-script-RenameComputer": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe Rename-Computer -NewName ", {
												"Ref": "AD1NetBIOSName"
											},
											" -Restart"
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"installADDS": {
						"commands": {
							"1-install-prereqs": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"2-install-adds": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command ",
											"\"Install-ADDSForest -DomainName ", {
												"Ref": "FullyQualifiedDomainName"
											},
											" ",
											"-SafeModeAdministratorPassword (convertto-securestring ", {
												"Ref": "DomainAdminPassword"
											},
											" -asplaintext -force) ",
											"-DomainMode Win2012 ",
											"-DomainNetbiosName ", {
												"Ref": "DomainNetBIOSName"
											},
											" ",
											"-ForestMode Win2012 ",
											"-Confirm:$false ",
											"-Force\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							},
							"3-restart-service": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command Restart-Service NetLogon -EA 0"
										]
									]
								},
								"waitAfterCompletion": "180"
							},
							"4-create-adminuser": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command ",
											"\"New-ADUser ",
											"-Name ", {
												"Ref": "DomainAdminUser"
											},
											" ",
											"-UserPrincipalName ", {
												"Ref": "DomainAdminUser"
											},
											"@", {
												"Ref": "FullyQualifiedDomainName"
											},
											" ",
											"-AccountPassword (ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force) ",
											"-Enabled $true ",
											"-PasswordNeverExpires $true\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"5-update-adminuser": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ", {
												"Ref": "DomainAdminUser"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"configureSites": {
						"commands": {
							"a-rename-default-site": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe ",
											"\"",
											"Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1",
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-create-site-2": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe New-ADReplicationSite AZ2"
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"c-create-public-subnet-1": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command New-ADReplicationSubnet -Name ", {
												"Ref": "PublicSubnet1CIDR"
											},
											" -Site AZ1"
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"d-create-public-subnet-2": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command New-ADReplicationSubnet -Name ", {
												"Ref": "PublicSubnet2CIDR"
											},
											" -Site AZ2"
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"e-create-private-subnet-1": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command New-ADReplicationSubnet -Name ", {
												"Ref": "PrivateSubnet1ACIDR"
											},
											" -Site AZ1"
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"f-create-private-subnet-2": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command New-ADReplicationSubnet -Name ", {
												"Ref": "PrivateSubnet2ACIDR"
											},
											" -Site AZ2"
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"m-set-site-link": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='AZ2'} -ReplicationFrequencyInMinutes 15\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"installADCS": {
						"commands": {
							"a-install-ca": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command c:\\cfn\\scripts\\New-CertificateAuthority.ps1 -Username ", {
												"Ref": "DomainAdminUser"
											},
											" -Password ", {
												"Ref": "DomainAdminPassword"
											},
											" -DomainDNSName ", {
												"Ref": "FullyQualifiedDomainName"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"finalize": {
						"commands": {
							"a-signal-success": {
								"command": {
									"Fn::Join": [
										"", [
											"cfn-signal.exe -e 0 \"", {
												"Ref": "DomainControllerWaitHandle"
											},
											"\""
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSAMIRegionMap", {
							"Ref": "AWS::Region"
						},
						"WS2012R2"
					]
				},
				"InstanceType": {
					"Ref": "AD1InstanceType"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet1AID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "AD1NetBIOSName"
					}
				}],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "100",
						"VolumeType": "gp2"
					}
				}],
				"SecurityGroupIds": [{
					"Ref": "DomainControllerSG1"
				}],
				"PrivateIpAddress": {
					"Ref": "AD1PrivateIp"
				},
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"<script>\n",
								"cfn-init.exe -v -c config -s ", {
									"Ref": "AWS::StackId"
								},
								" -r DomainController",
								" --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"</script>\n"
							]
						]
					}
				}
			}
		},
		"DomainController2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "DomainControllerWaitCondition",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"setup",
							"rename",
							"join",
							"addDomainController",
							"installADCS",
							"finalize"
						]
					},
					"setup": {
						"files": {
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackName"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.DomainController2.Metadata.AWS::CloudFormation::Init\n",
											"action=cfn-init.exe -v -c config -s ", {
												"Ref": "AWS::StackId"
											},
											" -r DomainController2",
											" --region ", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\Set-StaticIP.ps1": {
								"content": {
									"Fn::Join": [
										"", [
											"$netip = Get-NetIPConfiguration;",
											"$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
											"Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
											"Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
												"Ref": "AD1PrivateIp"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\New-CertificateAuthority.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/New-CertificateAuthority.ps1"
							},
							"c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/xAdcsDeployment_0.1.0.0.zip"
							},
							"c:\\cfn\\scripts\\Unzip-Archive.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/Unzip-Archive.ps1"
							}
						},
						"services": {
							"windows": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"c:\\cfn\\cfn-hup.conf",
										"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
									]
								}
							}
						},
						"commands": {
							"a-disable-win-fw": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-set-execution-policy": {
								"command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
								"waitAfterCompletion": "0"
							},
							"c-unpack-dsc-resource": {
								"command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules'",
								"waitAfterCompletion": "0"
							}
						}
					},
					"rename": {
						"commands": {
							"a-set-static-ip": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
										]
									]
								},
								"waitAfterCompletion": "45"
							},
							"b-execute-powershell-script-RenameComputer": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe Rename-Computer -NewName ", {
												"Ref": "AD2NetBIOSName"
											},
											" -Restart"
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"join": {
						"commands": {
							"a-join-domain": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Add-Computer -DomainName ", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -Credential ",
											"(New-Object System.Management.Automation.PSCredential('", {
												"Ref": "DomainNetBIOSName"
											},
											"\\", {
												"Ref": "DomainAdminUser"
											},
											"',",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force))) ",
											"-Restart\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"addDomainController": {
						"commands": {
							"1-install-prereqs": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"2-add-dc": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Install-ADDSDomainController -InstallDns -DomainName ", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -Credential ",
											"(New-Object System.Management.Automation.PSCredential('", {
												"Ref": "DomainNetBIOSName"
											},
											"\\", {
												"Ref": "DomainAdminUser"
											},
											"',",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force))) ",
											"-SafeModeAdministratorPassword ",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force) ",
											"-Confirm:$false -Force\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"installADCS": {
						"commands": {
							"a-install-ca": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command c:\\cfn\\scripts\\New-CertificateAuthority.ps1 -Username ", {
												"Ref": "DomainAdminUser"
											},
											" -Password ", {
												"Ref": "DomainAdminPassword"
											},
											" -DomainDNSName ", {
												"Ref": "FullyQualifiedDomainName"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"finalize": {
						"commands": {
							"a-update-dns-servers-dc2": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
												"Ref": "AD1PrivateIp"
											},
											",", {
												"Ref": "AD2PrivateIp"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-update-dns-servers-dc1": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command ",
											"\"Invoke-Command -Scriptblock{ ",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
												"Ref": "AD2PrivateIp"
											},
											",", {
												"Ref": "AD1PrivateIp"
											},
											" } -ComputerName ", {
												"Ref": "AD1NetBIOSName"
											},
											" -Credential ",
											"(New-Object System.Management.Automation.PSCredential('", {
												"Ref": "DomainNetBIOSName"
											},
											"\\", {
												"Ref": "DomainAdminUser"
											},
											"',",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force))) ",
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"c-signal-success": {
								"command": {
									"Fn::Join": [
										"", [
											"cfn-signal.exe -e 0 \"", {
												"Ref": "DomainController2WaitHandle"
											},
											"\""
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSAMIRegionMap", {
							"Ref": "AWS::Region"
						},
						"WS2012R2"
					]
				},
				"InstanceType": {
					"Ref": "AD2InstanceType"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet2AID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "AD2NetBIOSName"
					}
				}],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "100",
						"VolumeType": "gp2"
					}
				}],
				"SecurityGroupIds": [{
					"Ref": "DomainControllerSG2"
				}],
				"PrivateIpAddress": {
					"Ref": "AD2PrivateIp"
				},
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"<script>\n",
								"cfn-init.exe -v -c config -s ", {
									"Ref": "AWS::StackId"
								},
								" -r DomainController2",
								" --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"</script>\n"
							]
						]
					}
				}
			}
		},
		"RDGateway": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "DomainController2",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"setup",
							"rename",
							"join",
							"installRDS",
							"finalize"
						]
					},
					"setup": {
						"files": {
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackName"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.RDGateway.Metadata.AWS::CloudFormation::Init\n",
											"action=cfn-init.exe -v -c config -s ", {
												"Ref": "AWS::StackId"
											},
											" -r RDGateway",
											" --region ", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\Configure-RDGW.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/Configure-RDGW.ps1"
							}
						},
						"services": {
							"windows": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"c:\\cfn\\cfn-hup.conf",
										"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
									]
								}
							}
						},
						"commands": {
							"a-set-execution-policy": {
								"command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
								"waitAfterCompletion": "0"
							}
						}
					},
					"rename": {
						"commands": {
							"1-execute-powershell-script-RenameComputer": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command Rename-Computer -NewName RDGW1 -Restart"
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"join": {
						"commands": {
							"a-set-dns-servers": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
												"Ref": "AD1PrivateIp"
											},
											",", {
												"Ref": "AD2PrivateIp"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "30"
							},
							"b-join-domain": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Add-Computer -DomainName ", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -Credential ",
											"(New-Object System.Management.Automation.PSCredential('", {
												"Ref": "DomainNetBIOSName"
											},
											"\\", {
												"Ref": "DomainAdminUser"
											},
											"',",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force))) ",
											"-Restart\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"installRDS": {
						"commands": {
							"a-install-rds": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
										]
									]
								}
							},
							"b-configure-rdgw": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -ExecutionPolicy RemoteSigned",
											" C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGW1.", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -DomainNetBiosName ", {
												"Ref": "DomainNetBIOSName"
											},
											" -GroupName 'domain admins'"
										]
									]
								}
							}
						}
					},
					"finalize": {
						"commands": {
							"1-signal-success": {
								"command": {
									"Fn::Join": [
										"", [
											"cfn-signal.exe -e 0 \"", {
												"Ref": "RDGWWaitHandle"
											},
											"\""
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSAMIRegionMap", {
							"Ref": "AWS::Region"
						},
						"WS2012R2"
					]
				},
				"InstanceType": {
					"Ref": "RDGWInstanceType"
				},
				"SubnetId": {
					"Ref": "PublicSubnet1ID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "RDGW1"
				}],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "50",
						"VolumeType": "gp2"
					}
				}],
				"SecurityGroupIds": [{
					"Ref": "RDGWSecurityGroup"
				}, {
					"Ref": "DomainMemberSG"
				}],
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"<script>\n",
								"cfn-init.exe -v -c config -s ", {
									"Ref": "AWS::StackId"
								},
								" -r RDGateway",
								" --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"</script>\n"
							]
						]
					}
				}
			}
		},
		"RDGateway2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "DomainController2",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"setup",
							"rename",
							"join",
							"installRDS",
							"finalize"
						]
					},
					"setup": {
						"files": {
							"c:\\cfn\\cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackName"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.RDGateway2.Metadata.AWS::CloudFormation::Init\n",
											"action=cfn-init.exe -v -c config -s ", {
												"Ref": "AWS::StackId"
											},
											" -r RDGateway2",
											" --region ", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								}
							},
							"c:\\cfn\\scripts\\Configure-RDGW.ps1": {
								"source": "https://s3.amazonaws.com/sios-datakeeper/CloudFormation/adscripts/Configure-RDGW.ps1"
							}
						},
						"services": {
							"windows": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"c:\\cfn\\cfn-hup.conf",
										"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
									]
								}
							}
						},
						"commands": {
							"a-set-execution-policy": {
								"command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
								"waitAfterCompletion": "0"
							}
						}
					},
					"rename": {
						"commands": {
							"1-execute-powershell-script-RenameComputer": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command Rename-Computer -NewName RDGW2 -Restart"
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"join": {
						"commands": {
							"a-set-dns-servers": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
												"Ref": "AD2PrivateIp"
											},
											",", {
												"Ref": "AD1PrivateIp"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "30"
							},
							"b-join-domain": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"",
											"Add-Computer -DomainName ", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -Credential ",
											"(New-Object System.Management.Automation.PSCredential('", {
												"Ref": "DomainNetBIOSName"
											},
											"\\", {
												"Ref": "DomainAdminUser"
											},
											"',",
											"(ConvertTo-SecureString ", {
												"Ref": "DomainAdminPassword"
											},
											" -AsPlainText -Force))) ",
											"-Restart\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							}
						}
					},
					"installRDS": {
						"commands": {
							"a-install-rds": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
										]
									]
								}
							},
							"b-configure-rdgw": {
								"command": {
									"Fn::Join": [
										"", [
											"powershell.exe -ExecutionPolicy RemoteSigned",
											" C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGW2.", {
												"Ref": "FullyQualifiedDomainName"
											},
											" -DomainNetBiosName ", {
												"Ref": "DomainNetBIOSName"
											},
											" -GroupName 'domain admins'"
										]
									]
								}
							}
						}
					},
					"finalize": {
						"commands": {
							"1-signal-success": {
								"command": {
									"Fn::Join": [
										"", [
											"cfn-signal.exe -e 0 \"", {
												"Ref": "RDGW2WaitHandle"
											},
											"\""
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSAMIRegionMap", {
							"Ref": "AWS::Region"
						},
						"WS2012R2"
					]
				},
				"InstanceType": {
					"Ref": "RDGWInstanceType"
				},
				"SubnetId": {
					"Ref": "PublicSubnet2ID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "RDGW2"
				}],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "50",
						"VolumeType": "gp2"
					}
				}],
				"SecurityGroupIds": [{
					"Ref": "RDGWSecurityGroup"
				}, {
					"Ref": "DomainMemberSG"
				}],
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"<script>\n",
								"cfn-init.exe -v -c config -s ", {
									"Ref": "AWS::StackId"
								},
								" -r RDGateway2",
								" --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"</script>\n"
							]
						]
					}
				}
			}
		},
		"DomainControllerWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "DomainController",
			"Properties": {
				"Handle": {
					"Ref": "DomainControllerWaitHandle"
				},
				"Timeout": "3600"
			}
		},
		"DomainControllerWaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"DomainController2WaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "DomainController2",
			"Properties": {
				"Handle": {
					"Ref": "DomainController2WaitHandle"
				},
				"Timeout": "3600"
			}
		},
		"DomainController2WaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"RDGWWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "RDGateway",
			"Properties": {
				"Handle": {
					"Ref": "RDGWWaitHandle"
				},
				"Timeout": "3000"
			}
		},
		"RDGWWaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"RDGW2WaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "RDGateway2",
			"Properties": {
				"Handle": {
					"Ref": "RDGW2WaitHandle"
				},
				"Timeout": "3000"
			}
		},
		"RDGW2WaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"DomainControllerSG1": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Domain Controller",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "5985",
					"ToPort": "5985",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "135",
					"ToPort": "135",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "138",
					"ToPort": "138",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "445",
					"ToPort": "445",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "445",
					"ToPort": "445",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "464",
					"ToPort": "464",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "464",
					"ToPort": "464",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "389",
					"ToPort": "389",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "389",
					"ToPort": "389",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "636",
					"ToPort": "636",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3268",
					"ToPort": "3268",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3269",
					"ToPort": "3269",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "88",
					"ToPort": "88",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "88",
					"ToPort": "88",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "5355",
					"ToPort": "5355",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "137",
					"ToPort": "137",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "139",
					"ToPort": "139",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "5722",
					"ToPort": "5722",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "135",
					"ToPort": "135",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "138",
					"ToPort": "138",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "445",
					"ToPort": "445",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "445",
					"ToPort": "445",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "464",
					"ToPort": "464",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "464",
					"ToPort": "464",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "389",
					"ToPort": "389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "389",
					"ToPort": "389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "636",
					"ToPort": "636",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3268",
					"ToPort": "3268",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3269",
					"ToPort": "3269",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "88",
					"ToPort": "88",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "88",
					"ToPort": "88",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet1CIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet2CIDR"
					}
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}]
			}
		},
		"DomainControllerSG2": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Domain Controller",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "5985",
					"ToPort": "5985",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "135",
					"ToPort": "135",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "138",
					"ToPort": "138",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "445",
					"ToPort": "445",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "445",
					"ToPort": "445",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "464",
					"ToPort": "464",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "464",
					"ToPort": "464",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "389",
					"ToPort": "389",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "389",
					"ToPort": "389",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "636",
					"ToPort": "636",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3268",
					"ToPort": "3268",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3269",
					"ToPort": "3269",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "88",
					"ToPort": "88",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "5355",
					"ToPort": "5355",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "137",
					"ToPort": "137",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "139",
					"ToPort": "139",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "5722",
					"ToPort": "5722",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "135",
					"ToPort": "135",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9389",
					"ToPort": "9389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "138",
					"ToPort": "138",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "445",
					"ToPort": "445",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "445",
					"ToPort": "445",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "464",
					"ToPort": "464",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "464",
					"ToPort": "464",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "389",
					"ToPort": "389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "389",
					"ToPort": "389",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "636",
					"ToPort": "636",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3268",
					"ToPort": "3268",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3269",
					"ToPort": "3269",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "88",
					"ToPort": "88",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "88",
					"ToPort": "88",
					"SourceSecurityGroupId": {
						"Ref": "DomainMemberSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet1CIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet2CIDR"
					}
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}]
			}
		},
		"DomainMemberSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Domain Members",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet1ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "53",
					"ToPort": "53",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "udp",
					"FromPort": "49152",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "PrivateSubnet2ACIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet1CIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": {
						"Ref": "PublicSubnet2CIDR"
					}
				}]
			}
		},
		"RDGWSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable RDP access from the Internet",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3389",
					"ToPort": "3389",
					"CidrIp": "RDGWCIDR"
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "RDGWCIDR"
				}]
			}
		}
	},
	"Outputs": {
		"RDGW1ElasticIP": {
			"Value": {
				"Ref": "RdgwEIP"
			},
			"Description": "Elastic IP address of the first Remote Desktop Gateway (RDGW1) in AZ1"
		},
		"RootCert1": {
			"Value": "c:\\RDGW1.cer",
			"Description": "Location of the root SSL certificate on the first Remote Desktop Gateway (RDGW1) in AZ1"
		},
		"RDGW2ElasticIP": {
			"Value": {
				"Ref": "Rdgw2EIP"
			},
			"Description": "Elastic IP address of the second Remote Desktop Gateway (RDGW2) in AZ2"
		},
		"RootCert2": {
			"Value": "c:\\RDGW2.cer",
			"Description": "Location of the root SSL certificate on the first Remote Desktop Gateway (RDGW2) in AZ2"
		},
		"DomainAdmin": {
			"Value": {
				"Fn::Join": [
					"", [{
							"Ref": "DomainNetBIOSName"
						},
						"\\StackAdmin"
					]
				]
			},
			"Description": "Domain administrator account"
		},
		"DomainMemberSGID": {
			"Value": {
				"Ref": "DomainMemberSG"
			},
			"Description": "Domain Member Security Group ID"
		}
	}
}