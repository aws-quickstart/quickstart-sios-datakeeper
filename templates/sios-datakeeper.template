---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template deploys two Windows Server Failover Clustering (WSFC)
  nodes with SQL Server 2017 and DataKeeper replication software. This template is
  intended to be installed into an existing VPC that was built using the sample reference
  architecture titled: "Implementing Active Directory Domain Services in the AWS Cloud"
  **WARNING** This template creates Amazon EC2 Windows instance and related resources.
  You will be billed for the AWS resources used if you create a stack from this template.
  (qs-1qup6ralg)'
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying into an existing VPC"
    Order: "2"
  AWSAMIRegionMap:
    Filters:
      SDKCEWIN2019:
        name: SIOS DataKeeper v8* on 2019*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 4751lqgr72zqz6fwj12p82x8s
      SDKCEWIN2019BYOL:
        name: SIOS DataKeeper v8* on 2019 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 4em0o0s00hf8yye81sq8d619d
      SDKCEWIN2016:
        name: SIOS DataKeeper v8* on 2016*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 39ui2evyq6bmfxwhpwyci6l06
      SDKCEWIN2016BYOL:
        name: SIOS DataKeeper v8* on 2016 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 959g9sxo7jo9axg7au8fjxvmi
      SDKCEWIN2012R2:
        name: SIOS DataKeeper v8* on 2012R2*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: dvw0k1cslwup93kxyf85trjxm
      SDKCEWIN2012R2BYOL:
        name: SIOS DataKeeper v8* on 2012R2 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 14oj75sfcidvzwqizi8lzs7c2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet1CIDR
          - PrivateSubnet2ID
          - PrivateSubnet2CIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - ActiveDirectoryConfig
          - ActiveDirectoryId
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
          - ADServer1NetBIOSName
          - ADServer1PrivateIP
          - ADServer2NetBIOSName
          - ADServer2PrivateIP
          - DomainMemberSGID
      - Label:
          default: Replication Configuration
        Parameters:
          - AMIType
          - SIOSLicenseKeyFtpURL
          - SQLServerVersion
          - SQLServiceAccount
          - SQLServiceAccountPassword
          - Volume1Size
          - Volume1Type
          - Volume1Iops
      - Label:
          default: Failover Cluster Configuration
        Parameters:
          - OSVersion
          - WSFCNode1InstanceType
          - WSFCNode1NetBIOSName
          - WSFCNode1PrivateIP1
          - WSFCNode1PrivateIP2
          - WSFCNode1PrivateIP3
          - WSFCNode2InstanceType
          - WSFCNode2NetBIOSName
          - WSFCNode2PrivateIP1
          - WSFCNode2PrivateIP2
          - WSFCNode2PrivateIP3
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      OSVersion:
        default: Cluster Node OS Version
      ActiveDirectoryConfig:
        default: Configuration used for existing AD environment.
      ActiveDirectoryId:
        default: AWS Managed Microsoft AD ID
      ADServer1NetBIOSName:
        default: Domain Controller 1 NetBIOS Name
      ADServer1PrivateIP:
        default: Domain Controller 1 Private IP Address
      ADServer2NetBIOSName:
        default: Domain Controller 2 NetBIOS Name
      ADServer2PrivateIP:
        default: Domain Controller 2 Private IP Address
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainMemberSGID:
        default: Security Group ID for AD domain members
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      SIOSLicenseKeyFtpURL:
        default: SIOS License Key FTP URL
      SQLServerVersion:
        default: SQL Server Version
      SQLServiceAccount:
        default: Service Account Name
      SQLServiceAccountPassword:
        default: Service Account Password
      Volume1Iops:
        default: Data Volume IOPS
      Volume1Size:
        default: Data Volume Size (GiB)
      Volume1Type:
        default: Data Volume Type
      VPCID:
        default: VPC to place SQL cluster in
      VPCCIDR:
        default: DO I NEED THIS?
      WSFCNode1InstanceType:
        default: Instance Type for Cluster Node 1
      WSFCNode1NetBIOSName:
        default: Cluster Node 1 NetBIOS Name
      WSFCNode1PrivateIP1:
        default: Cluster Node 1 Private IP Address 1
      WSFCNode1PrivateIP2:
        default: Cluster Node 1 Private IP Address 2
      WSFCNode1PrivateIP3:
        default: Cluster Node 1 Private IP Address 3
      WSFCNode2InstanceType:
        default: Instance Type for Cluster Node 2
      WSFCNode2NetBIOSName:
        default: Cluster Node 2 NetBIOS Name
      WSFCNode2PrivateIP1:
        default: Cluster Node 2 Private IP Address 1
      WSFCNode2PrivateIP2:
        default: Cluster Node 2 Private IP Address 2
      WSFCNode2PrivateIP3:
        default: Cluster Node 2 Private IP Address 3
      AMIType:
        default: SIOS AMI Version
Parameters:
  AMIType:
    AllowedValues:
      - PAYG
      - BYOL
    Default: PAYG
    Description: AMI type for SIOS license purposes.
    Type: String
  OSVersion:
    AllowedValues:
      - WS2012R2
      - WS2016
      - WS2019
    Default: WS2012R2
    Description: Windows Server OS version to use for cluster nodes.
    Type: String
  ActiveDirectoryConfig:
    AllowedValues:
      - Legacy
      - Managed
    Default: Managed
    Description: Both refer to the quickstart-microsoft-activedirectory submodule. 'Legacy' refers to scenario 1. 'Managed' refers to scenario 3.
    Type: String
  ActiveDirectoryId:
    Description: Enter the ID of the AWS Managed Microsoft AD. If you are using self-managed Active Directory, leave this blank.
    Default: '' 
    Type: String
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC1
    Description: NetBIOS name of the first Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer1PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.10
    Description: Fixed private IP for the first Active Directory server located in
      Availability Zone 1
    Type: String
  ADServer2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC2
    Description: NetBIOS name of the second Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer2PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.10
    Description: Fixed private IP for the second Active Directory server located in
      Availability Zone 2
    Type: String
  ClusterName: 
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCCluster1
    Description: NetBIOS name of the WSFC Cluster
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: admin
    Description: User name for the account that will be used as Domain Administrator.
      This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Default: datakeeper.local
    Description: Fully qualified domain name (FQDN) e.g. example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainMemberSGID:
    Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DATAKEEPER
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-sios-datakeeper/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  SIOSLicenseKeyFtpURL:
    Default: 'override'
    Description: URL used to obtain license key for SIOS DataKeeper software.
    Type: String
  SQLServerVersion:
    AllowedValues:
      - None
      - '2016'
      - '2017'
    Default: '2017'
    Description: Version of MS SQL Server to install. Select 'None' if SQL Server
      is not desired.
    Type: String
  SQLServiceAccount:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: sqlsa
    Description: User name for the SQL Server Service Account. This Account is a Domain
      User.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  SQLServiceAccountPassword:
    AllowedPattern: (?=^(?![\s\S]))|(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the SQL Service account. Must be at least 8 characters
      containing letters, numbers and symbols. May be left blank if SQL Server is
      not desired.
    MaxLength: '32'
    MinLength: '0'
    NoEcho: 'true'
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  Volume1Iops:
    Default: 1000
    Description: Iops for the SQL Data drive (Only used when volume type is io1)
    MaxValue: 20000
    MinValue: 100
    Type: Number
  Volume1Size:
    Default: 100
    Description: Volume size for the SQL Data drive
    MaxValue: 16000
    MinValue: 100
    Type: Number
  Volume1Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL Data drive
    Type: String
  WSFCNode1InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode1
    Description: NetBIOS name of the first WSFC Node (up to 15 characters)
    MaxLength: 15
    MinLength: 1
    Type: String
  WSFCNode1PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.100
    Description: Primary private IP for the first WSFC Node located in Availability
      Zone 1
    Type: String
  WSFCNode1PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.101
    Description: Secondary private IP for WSFC cluster on first WSFC Node
    Type: String
  WSFCNode1PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.102
    Description: Third private IP for SQL Server Network Name on first WSFC Node
    Type: String
  WSFCNode2InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode2
    Description: NetBIOS name of the second WSFC Node (up to 15 characters)
    MaxLength: 15
    MinLength: 1
    Type: String
  WSFCNode2PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.100
    Description: Primary private IP for the second WSFC Node located in Availability
      Zone 2
    Type: String
  WSFCNode2PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.101
    Description: Secondary private IP for WSFC cluster on second WSFC Node
    Type: String
  WSFCNode2PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.102
    Description: Third private IP for SQL Server Network Name on second WSFC Node
    Type: String
Conditions:
  UsingManagedAD: !Equals [!Ref ActiveDirectoryConfig, 'Managed']
  ByolAmiCondition: !Not
    - !Equals
      - !Ref AMIType
      - PAYG
  SQLInstallCondition: !Not
    - !Equals
      - !Ref SQLServerVersion
      - None
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll AWS::EC2::VPC::Id
        AssertDescription: All subnets must be in the VPC
Mappings:
  BYOLNameMap:
    WS2012R2:
      Code: SDKCEWIN2012R2BYOL
    WS2016:
      Code: SDKCEWIN2016BYOL
    WS2019:
      Code: SDKCEWIN2019BYOL
  PAYGNameMap:
    WS2012R2:
      Code: SDKCEWIN2012R2
    WS2016:
      Code: SDKCEWIN2016
    WS2019:
      Code: SDKCEWIN2019
  AWSAMIRegionMap:
    ap-northeast-2:
      SDKCEWIN2012R2: ami-07aee85912702a8e8
      SDKCEWIN2012R2BYOL: ami-0513016de7b98ac61
      SDKCEWIN2016: ami-0bf43229aab6a7df7
      SDKCEWIN2016BYOL: ami-059a59756fe0c6359
      SDKCEWIN2019: ami-0976738e202d64f03
      SDKCEWIN2019BYOL: ami-0cd37acc4e5e663f2
    ap-south-1:
      SDKCEWIN2012R2: ami-0cdca6f7e1979755f
      SDKCEWIN2012R2BYOL: ami-084585b8d4a10a66c
      SDKCEWIN2016: ami-0e42dfb75a0fb7b80
      SDKCEWIN2016BYOL: ami-0f258dd2cb953322b
      SDKCEWIN2019: ami-04bb4ac688fb506e9
      SDKCEWIN2019BYOL: ami-07d7d6584e4e4c252
    ap-southeast-1:
      SDKCEWIN2012R2: ami-096b92345453768d6
      SDKCEWIN2012R2BYOL: ami-03d2b0ac930bb294f
      SDKCEWIN2016: ami-0cff216a19add18bd
      SDKCEWIN2016BYOL: ami-0c3602eaf0388135a
      SDKCEWIN2019: ami-0d6754ee33de3b9ad
      SDKCEWIN2019BYOL: ami-073333a76cdc09193
    ap-southeast-2:
      SDKCEWIN2012R2: ami-0156b48853df1ecb9
      SDKCEWIN2012R2BYOL: ami-04d8d8bc1d85560d4
      SDKCEWIN2016: ami-056e6aee7000d57ca
      SDKCEWIN2016BYOL: ami-09adba53758abb786
      SDKCEWIN2019: ami-0bd4f156283fbe846
      SDKCEWIN2019BYOL: ami-08aa5af192251628f
    ca-central-1:
      SDKCEWIN2012R2: ami-0c0928bb619fc2083
      SDKCEWIN2012R2BYOL: ami-0fb58dc07b7b5d819
      SDKCEWIN2016: ami-0738c394c51dab04d
      SDKCEWIN2016BYOL: ami-004b5d52c1efd8849
      SDKCEWIN2019: ami-0fc0de382b6e22c41
      SDKCEWIN2019BYOL: ami-0e0ec040aea36fc39
    eu-central-1:
      SDKCEWIN2012R2: ami-04589a140ab70aac0
      SDKCEWIN2012R2BYOL: ami-0008c7941a66715cd
      SDKCEWIN2016: ami-0b67f8c32fa88642e
      SDKCEWIN2016BYOL: ami-02110dd98679b9d98
      SDKCEWIN2019: ami-08658fce0bbd8bce4
      SDKCEWIN2019BYOL: ami-0249a18cb75ee1999
    eu-north-1:
      SDKCEWIN2012R2: ami-0819efd042dfa57df
      SDKCEWIN2012R2BYOL: ami-024cabf453405cc1b
      SDKCEWIN2016: ami-04ae86ce003ad73da
      SDKCEWIN2016BYOL: ami-050ea49dd75f27d62
      SDKCEWIN2019: ami-048b8675f79c155c6
      SDKCEWIN2019BYOL: ami-0349f127d30df0cc9
    eu-west-1:
      SDKCEWIN2012R2: ami-0c31bda1c76c3c9fc
      SDKCEWIN2012R2BYOL: ami-00f821f13cb0436ad
      SDKCEWIN2016: ami-06d567b91a08500a3
      SDKCEWIN2016BYOL: ami-0d8dc9c11b4e3ab20
      SDKCEWIN2019: ami-06e7c526b9b8026ff
      SDKCEWIN2019BYOL: ami-0590725665b90caae
    eu-west-2:
      SDKCEWIN2012R2: ami-06abc57fa909b4151
      SDKCEWIN2012R2BYOL: ami-04fb8bb7068c7cf5a
      SDKCEWIN2016: ami-0ec5a864f39dd2d11
      SDKCEWIN2016BYOL: ami-0de4e83a5c6016fd7
      SDKCEWIN2019: ami-0701e3966a4b76ee7
      SDKCEWIN2019BYOL: ami-00ec51a9dd7bd5bef
    eu-west-3:
      SDKCEWIN2012R2: ami-09f341c4a3eea9f03
      SDKCEWIN2012R2BYOL: ami-0bfba789c019ddbee
      SDKCEWIN2016: ami-0952652f506fb5657
      SDKCEWIN2016BYOL: ami-0751c28ace8f8862d
      SDKCEWIN2019: ami-0bedd7fa49c09788a
      SDKCEWIN2019BYOL: ami-04ed2802962859288
    sa-east-1:
      SDKCEWIN2012R2: ami-09610132294531593
      SDKCEWIN2012R2BYOL: ami-04f0b5be76d691f5b
      SDKCEWIN2016: ami-04e88e39099ab6daa
      SDKCEWIN2016BYOL: ami-0ceacd02fdad625ba
      SDKCEWIN2019: ami-04eb25539589e7927
      SDKCEWIN2019BYOL: ami-0e22cf681147e0c2f
    us-east-1:
      SDKCEWIN2012R2: ami-0b7677610c873dd41
      SDKCEWIN2012R2BYOL: ami-060ac340926c5740b
      SDKCEWIN2016: ami-01fe05f872eecdad6
      SDKCEWIN2016BYOL: ami-049b56c830993e699
      SDKCEWIN2019: ami-082175fcf99b8d31d
      SDKCEWIN2019BYOL: ami-0f7d8adc21293814f
    us-east-2:
      SDKCEWIN2012R2: ami-00140363e84db577e
      SDKCEWIN2012R2BYOL: ami-0f3aac75491b4e258
      SDKCEWIN2016: ami-073255e95f7603915
      SDKCEWIN2016BYOL: ami-0cc356fe52b8fe10d
      SDKCEWIN2019: ami-06bd9d182d2bfa08a
      SDKCEWIN2019BYOL: ami-06a63f89f5b651e9e
    us-west-1:
      SDKCEWIN2012R2: ami-09b8eb4ecd545df7c
      SDKCEWIN2012R2BYOL: ami-0becdc3a36599c4ae
      SDKCEWIN2016: ami-09cd4e2bf4f86b870
      SDKCEWIN2016BYOL: ami-0c7a6870f53699f51
      SDKCEWIN2019: ami-0f7f2bc69c488a3f7
      SDKCEWIN2019BYOL: ami-085cf882c0c48bb7d
    us-west-2:
      SDKCEWIN2012R2: ami-0a3a3558a58c61de9
      SDKCEWIN2012R2BYOL: ami-08983b5fc2832909a
      SDKCEWIN2016: ami-0dcfa9c9850a815b6
      SDKCEWIN2016BYOL: ami-0e3ce48d712530c3d
      SDKCEWIN2019: ami-018aeb83843427097
      SDKCEWIN2019BYOL: ami-034b0bea4b0c1cd0c
Resources:
  QuickStartLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/Quick_Start/${AWS::StackName}
      RetentionInDays: 30
  ADAdminSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AWSQuickStart/${AWS::StackName}/ADAdminSecrets'
      Description: MS AD Credentials for Quick Start
      SecretString: !Sub '{ "username" : "${DomainAdminUser}", "password" : "${DomainAdminPassword}" }'
  SQLSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AWSQuickStart/${AWS::StackName}/SQLSecrets'
      Description: MS SQL Credentials for Quick Start
      SecretString: !Sub '{ "username" : "${SQLServiceAccount}", "password" : "${SQLServiceAccountPassword}" }'
  SSMDocumentDKCE:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: Deploy SIOS DKCE with SSM Automation
        assumeRole: '{{AutomationAssumeRole}}'
        parameters: 
          AMIType:
           default: "PAYG"
           description: AMI type for SIOS license purposes.
           type: String
          OSVersion: 
           default: WS2012R2
           description: Windows Server OS version to use for cluster nodes.
           type: String
          ActiveDirectoryConfig:
           default: Managed
           description: Both refer to the quickstart-microsoft-activedirectory submodule. 'Legacy' refers to scenario 1. 'Managed' refers to scenario 3.
           type: String
          ADServer1NetBIOSName:
           default: SIOSDC1
           description: NetBIOS name of the first Active Directory server (up to 15 characters)
           type: String
          ADServer1PrivateIP: 
           default: 10.0.0.10
           description: Fixed private IP for the first Active Directory server located in Availability Zone 1
           type: String
          ADServer2NetBIOSName:
           default: SIOSDC2
           description: NetBIOS name of the second Active Directory server (up to 15 characters)
           type: String
          ADServer2PrivateIP:
           default: 10.0.32.10
           description: Fixed private IP for the second Active Directory server located in Availability Zone 2
           type: String
          DomainAdminPassword: 
           description: Password for the domain admin user. Must be at least 8 characters containing letters numbers and symbols
           type: String
          DomainAdminUser: 
           default: admin
           description: User name for the account that will be used as Domain Administrator. This is separate from the default "Administrator" account
           type: String
          DomainDNSName: 
           default: datakeeper.local
           description: Fully qualified domain name (FQDN) e.g. example.com
           type: String
          DomainNetBIOSName: 
           default: DATAKEEPER
           description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE
           type: String
          FSxId:
           default: ''
           description: FSx File Share Id used with AWS Managed AD deployment
           type: String
          FSxDnsName:
           default: ''
           description: Windows Remote PowerShell Endpoint for FSx File Share used with AWS Managed AD deployment
           type: String
          PrivateSubnet1CIDR:
           default: 10.0.0.0/19
           description: CIDR block for private subnet 1 located in Availability Zone 1.
           type: String
          PrivateSubnet2CIDR: 
           default: 10.0.32.0/19
           description: CIDR block for private subnet 2 located in Availability Zone 2.
           type: String
          SIOSLicenseKeyFtpURL: 
           default: 'override'
           description: URL used to obtain license key for SIOS DataKeeper software.
           type: String
          AdminSecrets:
           description: "AWS Secrets Parameter Name that has Password and User name for a domain administrator."
           type: "String"
          SQLSecrets:
           description: "AWS Secrets Parameter Name that has Password and User namer for the SQL Service Account."
           type: "String"
          SQL2016Media:
           default: https://download.microsoft.com/download/9/0/7/907AD35F-9F9C-43A5-9789-52470555DB90/ENU/SQLServer2016SP1-FullSlipstream-x64-ENU.iso
           description: SQL Server 2016 installation media location
           type: String
          SQL2017Media:
           default: https://download.microsoft.com/download/E/F/2/EF23C21D-7860-4F05-88CE-39AA114B014B/SQLServer2017-x64-ENU.iso
           description: SQL Server 2017 installation media location
           type: String
          SQL2019Media:
           default: https://go.microsoft.com/fwlink/?linkid=866664
           description: SQL Server 2019 installation media location
           type: String
          SQLServerVersion:
           default: '2017'
           description: Version of MS SQL Server to install. Select 'None' if SQL Server is not desired.
           type: String
          SQLServiceAccount: 
           default: sqlsa
           description: User name for the SQL Server Service Account. This Account is a Domain User.
           type: String
          SQLServiceAccountPassword: 
           description: Password for the SQL Service account. Must be at least 8 characters containing letters numbers and symbols. May be left blank if SQL Server is not desired.
           type: String
          ClusterName: 
           default: WSFCCluster1
           description: NetBIOS name of the WSFC Cluster
           type: String
          WSFCNode1NetBIOSName:
           default: WSFCNode1
           description: NetBIOS name of the first WSFC Node (up to 15 characters)
           type: String
          WSFCNode1PrivateIP1:
           default: 10.0.0.100
           description: Primary private IP for the first WSFC Node located in Availability Zone 1
           type: String
          WSFCNode1PrivateIP2:
           default: 10.0.0.101
           description: Secondary private IP for WSFC cluster on first WSFC Node
           type: String
          WSFCNode1PrivateIP3: 
           default: 10.0.0.102
           description: Third private IP for SQL Server Network Name on first WSFC Node
           type: String
          WSFCNode2NetBIOSName: 
           default: WSFCNode2
           description: NetBIOS name of the second WSFC Node (up to 15 characters)
           type: String
          WSFCNode2PrivateIP1:
           default: 10.0.32.100
           description: Primary private IP for the second WSFC Node located in Availability Zone 2
           type: String
          WSFCNode2PrivateIP2: 
           default: 10.0.32.101
           description: Secondary private IP for WSFC cluster on second WSFC Node
           type: String
          WSFCNode2PrivateIP3:
           default: 10.0.32.102
           description: Third private IP for SQL Server Network Name on second WSFC Node
           type: String
          QSS3BucketName:
            default: aws-quickstart
            description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
            type: String
          QSS3BucketRegion:
            default: us-east-1
            description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
            type: String
          QSS3KeyPrefix:
            default: quickstart-microsoft-activedirectory/
            description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
            type: String
          StackName:
            default: ''
            description: Stack Name Input for cfn resource signal
            type: String
          AutomationAssumeRole:
            default: ''
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            type: String
        mainSteps:
        - name: wsfcnodesInstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode1NetBIOSName}}','{{WSFCNode2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceIds
            Selector: $.Reservations..Instances..InstanceId
            Type: StringList
        - name: wsfcnode1InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode1NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: wsfcnode2InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: ManagedADBranch1
          action: aws:branch
          inputs:
            Choices:
            - NextStep: OSVersionBranch1
              Variable: "{{ActiveDirectoryConfig}}"
              StringEquals: Managed
        # START Self-Managed AD branch1
        - name: dc1InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{ADServer1NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: dc2InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{ADServer2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        # END Self-Managed AD branch1
        - name: OSVersionBranch1
          action: aws:branch
          inputs:
            Choices:
            - NextStep: InstallDSCModules
              Variable: "{{OSVersion}}"
              StringEquals: WS2019
            - NextStep: InstallDSCModules
              Variable: "{{OSVersion}}"
              StringEquals: WS2016
            - NextStep: 2012R2InstallWMF51
              Variable: "{{OSVersion}}"
              StringEquals: WS2012R2
        - name: 2012R2InstallWMF51
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Install-WMF51.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Install-WMF51.ps1
        - name: 2012R2InstallDSC
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: InstallDSCModules
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   Install-WindowsFeature -Name DSC-Service
                   Set-Item -Path WSMan:\localhost\MaxEnvelopeSizeKb -Value 2048
                   Set-WSManQuickConfig -Force
                   $PSVersion = $PSVersionTable.PSVersion.Major
                   if ($PSVersion -eq '4') {
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: InstallDSCModules
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/install-dsc-modules.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\install-dsc-modules.ps1
        - name: LCMConfig
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\LCM-Config.ps1
        - name: CopyQSModule
          action: aws:runCommand
          maxAttempts: 999
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip -LocalFile C:\cfn\modules\AWSQuickStart.zip
        - name: UnzipQSModule
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Unzip-Archive.ps1 -Source 'C:\\cfn\\modules\\AWSQuickStart.zip' -Destination 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\'
        - name: EnableCredSSP
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/EnableCredSsp.ps1 -LocalFile C:\cfn\scripts\EnableCredSsp.ps1
        - name: EnableCredSSPReboot
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = Test-Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation'
                   if ($CredSSPEnabled -eq $false) {
                     C:\cfn\scripts\EnableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: QSModuleStart
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - New-AWSQuickStartResourceSignal -Stack {{StackName}} -Resource SSMWaitCondition -Region {{global:REGION}}
        - name: SetDns
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Set-Dns.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Set-Dns.ps1 -ns1 {{ADServer1PrivateIP}} -ns2 {{ADServer2PrivateIP}}
        - name: OSVersionBranch2
          action: aws:branch
          inputs:
            Choices:
            - NextStep: CopyDriveLetterMapping
              Variable: "{{OSVersion}}"
              StringEquals: WS2019
            - NextStep: CopyDriveLetterMapping
              Variable: "{{OSVersion}}"
              StringEquals: WS2016
            - NextStep: DomainJoin
              Variable: "{{OSVersion}}"
              StringEquals: WS2012R2
        - name: CopyDriveLetterMapping
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}scripts/DriveLetterMappingConfig.json -LocalFile C:\ProgramData\Amazon\EC2-Windows\Launch\Config\DriveLetterMappingConfig.json
        - name: DomainJoin
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/DomainJoin.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\DomainJoin.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}}
        - name: DomainJoinApply
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\DomainJoin' -Wait -Verbose -Force
                   DscStatusCheck
        - name: OpenWSFCPorts
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/OpenWSFCPorts.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\OpenWSFCPorts.ps1
        - name: ByolAmiBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: CreateJob
              Variable: '{{AMIType}}'
              StringEquals: PAYG
            - NextStep: DownloadDKCELicense
              Variable: '{{AMIType}}'
              StringEquals: BYOL
        - name: DownloadDKCELicense
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/DownloadDKCELicense.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\DownloadDKCELicense.ps1 -SIOSLicenseKeyFtpURL "{{SIOSLicenseKeyFtpURL}}"
        - name: CreateJob
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/CreateJob.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\CreateJob.ps1 -JobName vol.D -JobDesc 'SQL Volume Protection' -SourceName {{WSFCNode1NetBIOSName}}.{{DomainDNSName}} -SourceVol D -SourceIP {{WSFCNode1PrivateIP1}} -TargetName {{WSFCNode2NetBIOSName}}.{{DomainDNSName}} -TargetIP {{WSFCNode2PrivateIP1}} -TargetVol D -SyncType S
        - name: CreateMirror
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/CreateMirror.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\CreateMirror.ps1 -SourceIP {{WSFCNode1PrivateIP1}} -Volume D -TargetIP {{WSFCNode2PrivateIP1}} -SyncType S
        - name: ManagedADBranch2
          action: aws:branch
          inputs:
            Choices:
            - NextStep: WSFCConfigureBranch
              Variable: "{{ActiveDirectoryConfig}}"
              StringEquals: Managed
        # START Self-Managed AD branch2
        - name: dc1installDSCModules
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                   Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5 -Force
                   Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
                   Install-Module -Name xSmbShare
                   Install-Module -Name PSDscResources
        - name: configureWSFCFileShare
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WSFCFileShare.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\WSFCFileShare.ps1
        - name: InvokeADReplicationDC1
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   repadmin /syncall /A /e /P
        - name: InvokeADReplicationDC2
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   repadmin /syncall /A /e /P
        # END Self-Managed AD branch2
        - name: WSFCConfigureBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: Node1configureWSFCNOSQL
              Variable: '{{SQLServerVersion}}'
              StringEquals: None
        # START INSTALL SQL branch
        - name: ManagedADBranch3
          action: aws:branch
          inputs:
            Choices:
            - NextStep: Node1configureWSFCSQLManagedAD
              Variable: "{{ActiveDirectoryConfig}}"
              StringEquals: Managed
        # START Self-Managed AD branch3
        - name: Node1configureWSFCSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNode1PrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -SQLSecret {{SQLSecrets}} -FileServerNetBIOSName {{ADServer1NetBIOSName}}
        - name: ApplyWSFCNode1Config
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ( -Not ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') ) {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   DscStatusCheck
        - name: SetFolderPermissions
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: Node1Reboot1SQL
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Set-Folder-Permissions.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Set-Folder-Permissions.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -Admin -SQLServiceAccount {{SQLServiceAccount}} -FileServerNetBIOSName {{ADServer1NetBIOSName}} -ClusterName {{ClusterName}}
        # END Self-Managed AD branch3
        - name: Node1configureWSFCSQLManagedAD
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: "./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNode1PrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -SQLSecret {{SQLSecrets}} -FSXFileSystemID {{FSxId}}"
        - name: Node1Reboot1SQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Node2configureWSFCSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode2PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}}
        - name: Node2Reboot1SQL
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: WaitForCluster
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force
                   DscStatusCheck
        # END INSTALL SQL branch
        # START NO SQL branch
        - name: Node1configureWSFCNOSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNode1PrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -FileServerNetBIOSName {{ADServer1NetBIOSName}}
        - name: ApplyWSFCNode1ConfigNoSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Node1Reboot1NoSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Node2ConfigureWSFCNOSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: Node2Reboot1NoSQL
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode2PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}}
        - name: Node2Reboot1NoSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force
                   DscStatusCheck
        # END NO SQL branch
        - name: WaitForCluster
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WaitForCluster.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: 
                !Sub
                  - .\WaitForCluster.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser ${AdminUser} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode1NetBIOSName}}
                  - AdminUser: !If
                      - UsingManagedAD
                      - 'admin'
                      - !Ref DomainAdminUser
        - name: ConfigSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/SQLConfig.ps1"}'
                  - S3Bucket: !If 
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: 
                !Sub
                  - .\SQLConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}} -ClusterName {{ClusterName}} -ManagedAD ${ManagedADSwitch}
                  - ManagedADSwitch: !If
                      - UsingManagedAD
                      - 'Yes'
                      - 'No'
        - name: ApplySQLConfig
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
            Parameters:
              commands:
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\SQLConfig' -Wait -Verbose -Force
                   DscStatusCheck
        - name: registerclustervolume
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/RegisterClusterVolume.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\RegisterClusterVolume.ps1 -Volume D
        - name: InstallSQLBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: DisableCredSSP
              Variable: '{{SQLServerVersion}}'
              StringEquals: None
        # START INSTALL SQL branch2
        - name: "2NodeDownloadSQL"
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/DownloadSQLEE.ps1"}'
                  - S3Bucket: !If 
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\DownloadSQLEE.ps1 -SQLServerVersion {{SQLServerVersion}} -SQL2016Media {{SQL2016Media}} -SQL2017Media {{SQL2017Media}} -SQL2019Media {{SQL2019Media}}
        - name: SQLInstallNode1MOF
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Install-SQLEE.ps1"}'
                  - S3Bucket: !If 
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Install-SQLEE.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}} -SQLServerVersion {{SQLServerVersion}} -SQLSecret {{SQLSecrets}} -SQLServerClusterIP {{WSFCNode1PrivateIP3}}
        - name: SQLInstallNode1
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Move-ClusterGroup -Name "Available Storage" -Node {{WSFCNode1NetBIOSName}}
                   Get-ClusterResource | Start-ClusterResource -IgnoreLocked -ErrorAction SilentlyContinue
                   Test-Cluster -Ignore Storage -Force
                   Start-DscConfiguration 'C:\AWSQuickstart\SQLInstall' -Wait -Verbose -Force
                   DscStatusCheck
        - name: SQLInstallNode2MOF
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Install-SQLEEAddNode.ps1"}'
                  - S3Bucket: !If 
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: .\Install-SQLEEAddNode.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}} -SQLServerVersion {{SQLServerVersion}} -SQLSecret {{SQLSecrets}} -SQLServerClusterIP {{WSFCNode1PrivateIP3}}
        - name: SQLInstallNode2
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\SQLInstall' -Wait -Verbose -Force
                   DscStatusCheck
        - name: WaitForClusterGroup
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WaitForClusterGroup.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine:
                !Sub
                  - .\WaitForClusterGroup.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser ${AdminUser} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode2NetBIOSName}}
                  - AdminUser: !If
                      - UsingManagedAD
                      - 'admin'
                      - !Ref DomainAdminUser
        # END INSTALL SQL branch2
        - name: DisableCredSSP
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/DisableCredSsp.ps1 -LocalFile C:\cfn\scripts\DisableCredSsp.ps1
        - name: DisableCredSSPReboot
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation' -Name AllowFreshCredentials -ErrorAction SilentlyContinue).AllowFreshCredentials
                   if ($CredSSPEnabled -eq 1) {
                     C:\cfn\scripts\DisableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: DSCCleanup
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Remove-Item -Path C:\AWSQuickstart\ -recurse
        # Determines if CFN Needs to be Signaled or if Work flow should just end
        - name: CFNSignalEnd
          action: aws:branch
          inputs:
            Choices:
            - NextStep: signalsuccess
              Not: 
                Variable: '{{StackName}}'
                StringEquals: ''
            - NextStep: sleepend
              Variable: '{{StackName}}'
              StringEquals: ''
        # If all steps complete successfully signals CFN of Success
        - name: signalsuccess
          action: aws:executeAwsApi
          isEnd: true
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: SSMWaitCondition
            StackName: '{{StackName}}'
            Status: SUCCESS
            UniqueId: '{{wsfcnode2InstanceId.InstanceId}}'
        # If CFN Signl Not Needed this sleep ends work flow
        - name: sleepend
          action: aws:sleep
          isEnd: true
          inputs:
            Duration: PT1S
        # If any steps fails signals CFN of Failure
        - name: signalfailure
          action: aws:executeAwsApi
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: SSMWaitCondition
            StackName: '{{StackName}}'
            Status: FAILURE
            UniqueId: '{{wsfcnode2InstanceId.InstanceId}}'
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub ['arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*', S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]]
                  - !Sub ['arn:${AWS::Partition}:s3:::${S3Bucket}', S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]]
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
        - PolicyName: ssm-custom-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: 
                  - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
        - PolicyName: QS-MSSQL-SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'SQLSecrets'
                  - !Ref 'ADAdminSecrets'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'
        - PolicyName: cloudformation-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*'
        - PolicyName: ssm-policy
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: ssm:StartAutomationExecution
                  Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMDocumentDKCE}:$DEFAULT
                - Effect: Allow
                  Action: ssm:SendCommand
                  Resource:
                    - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunRemoteScript
                - Effect: Allow
                  Action: ssm:SendCommand
                  Resource:
                    - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunPowerShellScript
                - Effect: Allow
                  Action: ssm:SendCommand
                  Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                - Effect: Allow
                  Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:ListCommandInvocations
                  - ssm:ListCommands
                  Resource: '*'
        - PolicyName: ec2-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeTags
                  - fsx:DescribeFileSystems
                  - tag:GetResources
                Resource: '*'
  SIOSSSMPassRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SIOS-SSM-PassRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${InstanceRole}
      Roles:
        - !Ref InstanceRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  FSxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security Group for FSx for Windows File Storage Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 88
          ToPort: 88
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 445
          ToPort: 445
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: !Ref VPCCIDR
        - IpProtocol: udp
          FromPort: 464
          ToPort: 464
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 464
          ToPort: 464
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3268
          ToPort: 3268
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3269
          ToPort: 3269
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 9389
          ToPort: 9389
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
  WindowsFSx:
    Condition: UsingManagedAD
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: 32
      SubnetIds:
        - !Ref 'PrivateSubnet1ID'
      SecurityGroupIds:
        - !Ref 'DomainMemberSGID'
        - !Ref 'FSxSecurityGroup'
      Tags:
        - Key: Name
          Value: !Sub "FSxWitness-${AWS::StackName}"
      WindowsConfiguration:
        ActiveDirectoryId: !Ref 'ActiveDirectoryId'
        DeploymentType: SINGLE_AZ_2
        ThroughputCapacity: 32
  WSFCNode1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref InstanceRole
          buckets: !Ref QSS3BucketName
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - BYOLNameMap
            - !Ref OSVersion
            - Code
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - PAYGNameMap
            - !Ref OSVersion
            - Code
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref WSFCNode1InstanceType
      EbsOptimized: true
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnet1ID
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Ref WSFCNode1PrivateIP1
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode1PrivateIP2
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode1PrivateIP3
          GroupSet:
            - !Ref DomainMemberSGID
            - !Ref WSFCSecurityGroup
            - !Ref WSFCClientSecurityGroup
            - !Ref SIOSDataKeeperSG
      Tags:
        - Key: Name
          Value: !Ref WSFCNode1NetBIOSName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 127
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref KeyPairName
  WSFCNode2:
    Type: AWS::EC2::Instance
    DependsOn:
      - WSFCNode1
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref InstanceRole
          buckets: !Ref QSS3BucketName
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - BYOLNameMap
            - !Ref OSVersion
            - Code
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - PAYGNameMap
            - !Ref OSVersion
            - Code
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref WSFCNode2InstanceType
      EbsOptimized: true
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnet2ID
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Ref WSFCNode2PrivateIP1
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode2PrivateIP2
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode2PrivateIP3
          GroupSet:
            - !Ref DomainMemberSGID
            - !Ref WSFCSecurityGroup
            - !Ref WSFCClientSecurityGroup
            - !Ref SIOSDataKeeperSG
      Tags:
        - Key: Name
          Value: !Ref WSFCNode2NetBIOSName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 127
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref KeyPairName
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - 'Start-SSMAutomationExecution -DocumentName '
            - !Sub '"${SSMDocumentDKCE}"'
            - ' -Parameter @{"AMIType"='
            - !Sub '"${AMIType}"'
            - ';"OSVersion"='
            - !Sub '"${OSVersion}"'
            - ';"ActiveDirectoryConfig"='
            - !Sub '"${ActiveDirectoryConfig}"'
            - ';"ADServer1NetBIOSName"='
            - !Sub '"${ADServer1NetBIOSName}"'
            - ';"ADServer1PrivateIP"='
            - !Sub '"${ADServer1PrivateIP}"'
            - ';"ADServer2NetBIOSName"='
            - !Sub '"${ADServer2NetBIOSName}"'
            - ';"ADServer2PrivateIP"='
            - !Sub '"${ADServer2PrivateIP}"'
            - ';"DomainAdminPassword"='
            - !Sub '"${DomainAdminPassword}"'
            - ';"DomainAdminUser"='
            - !Sub '"${DomainAdminUser}"'
            - ';"DomainDNSName"='
            - !Sub '"${DomainDNSName}"'
            - ';"DomainNetBIOSName"='
            - !Sub '"${DomainNetBIOSName}"'
            - ';"FSxId"='
            - !Sub '"${WindowsFSx}"'
            - ';"FSxDnsName"='
            - !Sub '"${WindowsFSx.DNSName}"'
            - ';"PrivateSubnet1CIDR"='
            - !Sub '"${PrivateSubnet1CIDR}"'
            - ';"PrivateSubnet2CIDR"='
            - !Sub '"${PrivateSubnet2CIDR}"'
            - ';"SIOSLicenseKeyFtpURL"='
            - !Sub '"${SIOSLicenseKeyFtpURL}"'
            - ';"AdminSecrets"='
            - !Sub '"${ADAdminSecrets}"'
            - ';"SQLSecrets"='
            - !Sub '"${SQLSecrets}"'
            - ';"SQLServerVersion"='
            - !Sub '"${SQLServerVersion}"'
            - ';"SQLServiceAccount"='
            - !Sub '"${SQLServiceAccount}"'
            - ';"SQLServiceAccountPassword"='
            - !Sub '"${SQLServiceAccountPassword}"'
            - ';"ClusterName"='
            - !Sub '"${ClusterName}"'
            - ';"WSFCNode1NetBIOSName"='
            - !Sub '"${WSFCNode1NetBIOSName}"'
            - ';"WSFCNode1PrivateIP1"='
            - !Sub '"${WSFCNode1PrivateIP1}"'
            - ';"WSFCNode1PrivateIP2"='
            - !Sub '"${WSFCNode1PrivateIP2}"'
            - ';"WSFCNode1PrivateIP3"='
            - !Sub '"${WSFCNode1PrivateIP3}"'
            - ';"WSFCNode2NetBIOSName"='
            - !Sub '"${WSFCNode2NetBIOSName}"'
            - ';"WSFCNode2PrivateIP1"='
            - !Sub '"${WSFCNode2PrivateIP1}"'
            - ';"WSFCNode2PrivateIP2"='
            - !Sub '"${WSFCNode2PrivateIP2}"'
            - ';"WSFCNode2PrivateIP3"='
            - !Sub '"${WSFCNode2PrivateIP3}"'
            - ';"QSS3BucketName"='
            - !Sub '"${QSS3BucketName}"'
            - ';"QSS3BucketRegion"='
            - !Sub '"${QSS3BucketRegion}"'
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"AutomationAssumeRole"='
            - !Sub '"arn:aws:iam::${AWS::AccountId}:role/${InstanceRole}"'
            - '}'
            - "\n"
            - "</powershell>\n"
  WSFCNode1Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref Volume1Size
      VolumeType: !Ref Volume1Type
      AvailabilityZone: !GetAtt WSFCNode1.AvailabilityZone
  WSFCNode2Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref Volume1Size
      VolumeType: !Ref Volume1Type
      AvailabilityZone: !GetAtt WSFCNode2.AvailabilityZone
  WSFCNode1Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref WSFCNode1
      VolumeId: !Ref WSFCNode1Volume1
  WSFCNode2Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref WSFCNode2
      VolumeId: !Ref WSFCNode2Volume1
  WSFCNode1Volume2:
    Type: AWS::EC2::Volume
    Condition: SQLInstallCondition
    Properties:
      Size: 100
      VolumeType: 'gp2'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
  WSFCNode1Volume3:
    Type: AWS::EC2::Volume
    Condition: SQLInstallCondition
    Properties:
      Size: 100
      VolumeType: 'gp2'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
  WSFCNode2Volume2:
    Type: AWS::EC2::Volume
    Condition: SQLInstallCondition
    Properties:
      Size: 100
      VolumeType: 'gp2'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
  WSFCNode2Volume3:
    Type: AWS::EC2::Volume
    Condition: SQLInstallCondition
    Properties:
      Size: 100
      VolumeType: 'gp2'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
  WSFCNode1Volume2Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: SQLInstallCondition
    Properties:
      Device: /dev/xvdc
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume2'
  WSFCNode1Volume3Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: SQLInstallCondition
    Properties:
      Device: /dev/xvdd
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume3'
  WSFCNode2Volume2Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: SQLInstallCondition
    Properties:
      Device: /dev/xvdc
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume2'
  WSFCNode2Volume3Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: SQLInstallCondition
    Properties:
      Device: /dev/xvdd
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume3'
  SSMWaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  SSMWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT300M
        Count: 1
    DependsOn: WSFCNode2
    Properties: 
      Handle: 
        Ref: SSMWaitHandle
      Timeout: '18000'
      Count: 1
  SIOSDataKeeperSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Replication node communication
      VpcId: !Ref VPCID
  SIOSDataKeeperSGIngressTCP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 137
      ToPort: 139
  SIOSDataKeeperSGIngressUDP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: udp
      FromPort: 137
      ToPort: 138
  SIOSDataKeeperSGIngressTCP139:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 139
      ToPort: 139
  SIOSDataKeeperSGIngressTCP9999:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 9999
      ToPort: 9999
  SIOSDataKeeperSGIngressTCP10003:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 10000
      ToPort: 10025
  SIOSDataKeeperSGIngressTCP445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445
  WSFCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable the WSFC and SQL AlwaysOn Availability Group communications
      VpcId: !Ref VPCID
  WSFCSecurityGroupIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
  WSFCSecurityGroupIngressTcp135:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 135
      ToPort: 135
  WSFCSecurityGroupIngressTcp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 137
      ToPort: 137
  WSFCSecurityGroupIngressTcp445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445
  WSFCSecurityGroupIngressTcp1433:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 1433
      ToPort: 1434
  WSFCSecurityGroupIngressTcp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 3343
      ToPort: 3343
  WSFCSecurityGroupIngressTcp5022:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 5022
      ToPort: 5022
  WSFCSecurityGroupIngressTcp5985:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 5985
      ToPort: 5985
  WSFCSecurityGroupIngressUdp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 137
      ToPort: 137
  WSFCSecurityGroupIngressUdp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 3343
      ToPort: 3343
  WSFCSecurityGroupIngressUdp1434:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 1434
      ToPort: 1434
  WSFCSecurityGroupIngressTcpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 49152
      ToPort: 65535
  WSFCSecurityGroupIngressUdpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 49152
      ToPort: 65535
  SQLServerAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Allows access to SQL Servers
  WSFCClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQL Client access ports
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref SQLServerAccessSecurityGroup
Outputs:
  DomainAdmin:
    Value: !Join
      - ''
      - - !Ref DomainNetBIOSName
        - \
        - !Ref DomainAdminUser
    Description: Domain administrator account
  LocalAdmin:
    Value: Administrator
    Description: Please retrieve Administrator password of the instance
  WSFCNode1NetBIOSName:
    Value: !Ref WSFCNode1NetBIOSName
    Description: NetBIOS name of the 1st WSFC Node
  WSFCNode2NetBIOSName:
    Value: !Ref WSFCNode2NetBIOSName
    Description: NetBIOS name of the 2nd WSFC Node
  SQLServerAccessSecurityGroup:
    Value: !Ref SQLServerAccessSecurityGroup
    Description: Add instances that require access to SQL to this Security Group
...  
