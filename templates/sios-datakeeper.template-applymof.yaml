AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template deploys two Windows Server Failover Clustering (WSFC) nodes with SQL
  Server 2014 and DataKeeper replication software. This template is intended to be
  installed into an existing VPC that was built using the sample reference architecture
  titled: "Implementing Active Directory Domain Services in the AWS Cloud" **WARNING**
  This template creates Amazon EC2 Windows instance and related resources. You will
  be billed for the AWS resources used if you create a stack from this template. QS(5033)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet1CIDR
          - PrivateSubnet2ID
          - PrivateSubnet2CIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
          - ADServer1NetBIOSName
          - ADServer1PrivateIP
          - ADServer2NetBIOSName
          - ADServer2PrivateIP
          - DomainMemberSGID
      - Label:
          default: Replication Configuration
        Parameters:
          - AMIType
          - SIOSLicenseKeyFtpURL
          - SQLServerVersion
          - SQLServiceAccount
          - SQLServiceAccountPassword
          - Volume1Size
          - Volume1Type
          - Volume1Iops
      - Label:
          default: Failover Cluster Configuration
        Parameters:
          - OSVersion
          - WSFCNode1InstanceType
          - WSFCNode1NetBIOSName
          - WSFCNode1PrivateIP1
          - WSFCNode1PrivateIP2
          - WSFCNode1PrivateIP3
          - WSFCNode2InstanceType
          - WSFCNode2NetBIOSName
          - WSFCNode2PrivateIP1
          - WSFCNode2PrivateIP2
          - WSFCNode2PrivateIP3
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      OSVersion:
        default: Cluster Node OS Version
      ADServer1NetBIOSName:
        default: Domain Controller 1 NetBIOS Name
      ADServer1PrivateIP:
        default: Domain Controller 1 Private IP Address
      ADServer2NetBIOSName:
        default: Domain Controller 2 NetBIOS Name
      ADServer2PrivateIP:
        default: Domain Controller 2 Private IP Address
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainMemberSGID:
        default: Security Group ID for AD domain members
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      SIOSLicenseKeyFtpURL:
        default: SIOS License Key FTP URL
      SQLServerVersion:
        default: SQL Server Version
      SQLServiceAccount:
        default: Service Account Name
      SQLServiceAccountPassword:
        default: Service Account Password
      Volume1Iops:
        default: Data Volume IOPS
      Volume1Size:
        default: Data Volume Size (GiB)
      Volume1Type:
        default: Data Volume Type
      VPCID:
        default: VPC to place SQL cluster in
      WSFCNode1InstanceType:
        default: Instance Type for Cluster Node 1
      WSFCNode1NetBIOSName:
        default: Cluster Node 1 NetBIOS Name
      WSFCNode1PrivateIP1:
        default: Cluster Node 1 Private IP Address 1
      WSFCNode1PrivateIP2:
        default: Cluster Node 1 Private IP Address 2
      WSFCNode1PrivateIP3:
        default: Cluster Node 1 Private IP Address 3
      WSFCNode2InstanceType:
        default: Instance Type for Cluster Node 2
      WSFCNode2NetBIOSName:
        default: Cluster Node 2 NetBIOS Name
      WSFCNode2PrivateIP1:
        default: Cluster Node 2 Private IP Address 1
      WSFCNode2PrivateIP2:
        default: Cluster Node 2 Private IP Address 2
      WSFCNode2PrivateIP3:
        default: Cluster Node 2 Private IP Address 3
      AMIType:
        default: SIOS AMI Version
Parameters:
  AMIType:
    AllowedValues:
      - PAYG
      - BYOL
    Default: PAYG
    Description: AMI type for SIOS license purposes.
    Type: String
  OSVersion:
    AllowedValues:
      - 2012R2
      - '2016'
    Default: 2012R2
    Description: Windows Server OS version to use for cluster nodes.
    Type: String
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC1
    Description: NetBIOS name of the first Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer1PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.10
    Description: Fixed private IP for the first Active Directory server located in
      Availability Zone 1
    Type: String
  ADServer2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC2
    Description: NetBIOS name of the second Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer2PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.10
    Description: Fixed private IP for the second Active Directory server located in
      Availability Zone 2
    Type: String
  ClusterName: 
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: "WSFCCluster1"
    Description: "NetBIOS name of the WSFC Cluster"
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: siosadmin
    Description: User name for the account that will be used as Domain Administrator.
      This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Default: datakeeper.local
    Description: Fully qualified domain name (FQDN) e.g. example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainMemberSGID:
    Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DATAKEEPER
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-sios-datakeeper/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  SIOSLicenseKeyFtpURL:
    Default: ''
    Description: URL used to obtain license key for SIOS DataKeeper software.
    Type: String
  SQLServerVersion:
    AllowedValues:
      - None
      - 2014SP1
    Default: 2014SP1
    Description: Version of MS SQL Server to install. Select 'None' if SQL Server
      is not desired.
    Type: String
  SQLServiceAccount:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: sqlsa
    Description: User name for the SQL Server Service Account. This Account is a Domain
      User.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  SQLServiceAccountPassword:
    AllowedPattern: (?=^(?![\s\S]))|(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the SQL Service account. Must be at least 8 characters
      containing letters, numbers and symbols. May be left blank if SQL Server is
      not desired.
    MaxLength: '32'
    MinLength: '0'
    NoEcho: 'true'
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  Volume1Iops:
    Default: '1000'
    Description: Iops for the SQL Data drive (Only used when volume type is io1)
    MaxValue: '20000'
    MinValue: '100'
    Type: Number
  Volume1Size:
    Default: '100'
    Description: Volume size for the SQL Data drive
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  Volume1Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL Data drive
    Type: String
  WSFCNode1InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode1
    Description: NetBIOS name of the first WSFC Node (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCNode1PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.100
    Description: Primary private IP for the first WSFC Node located in Availability
      Zone 1
    Type: String
  WSFCNode1PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.101
    Description: Secondary private IP for WSFC cluster on first WSFC Node
    Type: String
  WSFCNode1PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.102
    Description: Third private IP for SQL Server Network Name on first WSFC Node
    Type: String
  WSFCNode2InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode2
    Description: NetBIOS name of the second WSFC Node (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCNode2PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.100
    Description: Primary private IP for the second WSFC Node located in Availability
      Zone 2
    Type: String
  WSFCNode2PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.101
    Description: Secondary private IP for WSFC cluster on second WSFC Node
    Type: String
  WSFCNode2PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.102
    Description: Third private IP for SQL Server Network Name on second WSFC Node
    Type: String
Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  ByolAmiCondition: !Not
    - !Equals
      - !Ref 'AMIType'
      - PAYG
  SQLInstallCondition: !Not
    - !Equals
      - !Ref 'SQLServerVersion'
      - None
  OSVersionCondition: !Equals
    - !Ref 'OSVersion'
    - '2016'
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
Mappings:
  AWSAMIRegionMap:
    AMI:
      SDKCEWIN2012R2: SIOS DataKeeper v8.6.3 on 2012R2 BYOL-131676ee-31be-464b-8ae0-ba2495e88b22-ami-0a56ec950b97908aa.4
      SDKCEWIN2012R2BYOL: SIOS DataKeeper v8.6.3 on 2012R2 BYOL-131676ee-31be-464b-8ae0-ba2495e88b22-ami-0a56ec950b97908aa.4
      SDKCEWIN2016: SIOS DataKeeper v8.6.3 on 2016 BYOL-9a7d70de-0121-4ecf-b190-10e31dd8ad5a-ami-055dba3db82e8fe46.4
      SDKCEWIN2016BYOL: SIOS DataKeeper v8.6.3 on 2016 BYOL-9a7d70de-0121-4ecf-b190-10e31dd8ad5a-ami-055dba3db82e8fe46.4
    ap-northeast-2:
      SDKCEWIN2012R2: ami-084867de574844f84
      SDKCEWIN2012R2BYOL: ami-084867de574844f84
      SDKCEWIN2016: ami-0ae004a6a351d433e
      SDKCEWIN2016BYOL: ami-0ae004a6a351d433e
    ap-south-1:
      SDKCEWIN2012R2: ami-0028c5bd9f04c8b8b
      SDKCEWIN2012R2BYOL: ami-0028c5bd9f04c8b8b
      SDKCEWIN2016: ami-03972ae021a152d63
      SDKCEWIN2016BYOL: ami-03972ae021a152d63
    ap-southeast-1:
      SDKCEWIN2012R2: ami-05aa3039254bdff3d
      SDKCEWIN2012R2BYOL: ami-05aa3039254bdff3d
      SDKCEWIN2016: ami-0fef93480eff5ad60
      SDKCEWIN2016BYOL: ami-0fef93480eff5ad60
    ap-southeast-2:
      SDKCEWIN2012R2: ami-0978c3bffe4934975
      SDKCEWIN2012R2BYOL: ami-0978c3bffe4934975
      SDKCEWIN2016: ami-07bc25fe70c92737d
      SDKCEWIN2016BYOL: ami-07bc25fe70c92737d
    ca-central-1:
      SDKCEWIN2012R2: ami-0799852f76dd9ecf2
      SDKCEWIN2012R2BYOL: ami-0799852f76dd9ecf2
      SDKCEWIN2016: ami-025cea949cb7b6239
      SDKCEWIN2016BYOL: ami-025cea949cb7b6239
    eu-central-1:
      SDKCEWIN2012R2: ami-01aa11f8119a0747c
      SDKCEWIN2012R2BYOL: ami-01aa11f8119a0747c
      SDKCEWIN2016: ami-08dabff0ef4937f69
      SDKCEWIN2016BYOL: ami-08dabff0ef4937f69
    eu-west-1:
      SDKCEWIN2012R2: ami-044602264f3c3a4b6
      SDKCEWIN2012R2BYOL: ami-044602264f3c3a4b6
      SDKCEWIN2016: ami-0ead6a9c136fa9ad8
      SDKCEWIN2016BYOL: ami-0ead6a9c136fa9ad8
    eu-west-2:
      SDKCEWIN2012R2: ami-00d0e2c7f05adfc81
      SDKCEWIN2012R2BYOL: ami-00d0e2c7f05adfc81
      SDKCEWIN2016: ami-04e7a278b6c036807
      SDKCEWIN2016BYOL: ami-04e7a278b6c036807
    eu-west-3:
      SDKCEWIN2012R2: ami-081d5927ea3ea96ac
      SDKCEWIN2012R2BYOL: ami-081d5927ea3ea96ac
      SDKCEWIN2016: ami-052e6b719de852432
      SDKCEWIN2016BYOL: ami-052e6b719de852432
    sa-east-1:
      SDKCEWIN2012R2: ami-03cf316eab12b7f4a
      SDKCEWIN2012R2BYOL: ami-03cf316eab12b7f4a
      SDKCEWIN2016: ami-0850945f42a6a2e4b
      SDKCEWIN2016BYOL: ami-0850945f42a6a2e4b
    us-east-1:
      SDKCEWIN2012R2: ami-0d799a5b21ecfd370
      SDKCEWIN2012R2BYOL: ami-0d799a5b21ecfd370
      SDKCEWIN2016: ami-07eb5b905b4f54315
      SDKCEWIN2016BYOL: ami-07eb5b905b4f54315
    us-east-2:
      SDKCEWIN2012R2: ami-072e5a06d7fdf8908
      SDKCEWIN2012R2BYOL: ami-072e5a06d7fdf8908
      SDKCEWIN2016: ami-0433f49f69fb6c8c6
      SDKCEWIN2016BYOL: ami-0433f49f69fb6c8c6
    us-west-1:
      SDKCEWIN2012R2: ami-09ef06b4426d4dd02
      SDKCEWIN2012R2BYOL: ami-09ef06b4426d4dd02
      SDKCEWIN2016: ami-036c6f1543b1fb20e
      SDKCEWIN2016BYOL: ami-036c6f1543b1fb20e
    us-west-2:
      SDKCEWIN2012R2: ami-00492b59993490d72
      SDKCEWIN2012R2BYOL: ami-00492b59993490d72
      SDKCEWIN2016: ami-0db559222a40942ee
      SDKCEWIN2016BYOL: ami-0db559222a40942ee
Resources:
  AWSQuickstartSIOSDKCE:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: "Deploy SIOS DKCE with SSM Automation"
        assumeRole: "{{AutomationAssumeRole}}"
        parameters: 
          AMIType:
           default: "PAYG"
           description: "AMI type for SIOS license purposes."
           type: "String"
          OSVersion: 
           default: "2012R2"
           description: "Windows Server OS version to use for cluster nodes."
           type: "String"
          ADServer1NetBIOSName:
           default: "DC1"
           description: "NetBIOS name of the first Active Directory server (up to 15 characters)"
           type: "String"
          ADServer1PrivateIP: 
           default: "10.0.0.10"
           description: "Fixed private IP for the first Active Directory server located in Availability Zone 1"
           type: "String"
          ADServer2NetBIOSName:
           default: "DC2"
           description: "NetBIOS name of the second Active Directory server (up to 15 characters)"
           type: "String"
          ADServer2PrivateIP:
           default: "10.0.32.10"
           description: "Fixed private IP for the second Active Directory server located in Availability Zone 2"
           type: "String"
          DomainAdminPassword: 
           description: "Password for the domain admin user. Must be at least 8 characters containing letters numbers and symbols"
           type: "String"
          DomainAdminUser: 
           default: "siosadmin"
           description: "User name for the account that will be used as Domain Administrator. This is separate from the default \"Administrator\" account"
           type: "String"
          DomainDNSName: 
           default: "datakeeper.local"
           description: "Fully qualified domain name (FQDN) e.g. example.com"
           type: "String"
          DomainNetBIOSName: 
           default: "DATAKEEPER"
           description: "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE"
           type: "String"
          PrivateSubnet1CIDR:
           default: "10.0.0.0/19"
           description: "CIDR block for private subnet 1 located in Availability Zone 1."
           type: "String"
          PrivateSubnet2CIDR: 
           default: "10.0.32.0/19"
           description: "CIDR block for private subnet 2 located in Availability Zone 2."
           type: "String"
          SIOSLicenseKeyFtpURL: 
           default: ""
           description: "URL used to obtain license key for SIOS DataKeeper software."
           type: "String"
          SQLServerVersion:
           default: "2014SP1"
           description: "Version of MS SQL Server to install. Select 'None' if SQL Server is not desired."
           type: "String"
          SQLServiceAccount: 
           default: "sqlsa"
           description: "User name for the SQL Server Service Account. This Account is a Domain User."
           type: "String"
          SQLServiceAccountPassword: 
           description: "Password for the SQL Service account. Must be at least 8 characters containing letters numbers and symbols. May be left blank if SQL Server is not desired."
           type: "String"
          ClusterName: 
           default: "WSFCCluster1"
           description: "NetBIOS name of the WSFC Cluster"
           type: "String"
          WSFCNode1NetBIOSName:
           default: "WSFCNode1"
           description: "NetBIOS name of the first WSFC Node (up to 15 characters)"
           type: "String"
          WSFCNode1PrivateIP1:
           default: "10.0.0.100"
           description: "Primary private IP for the first WSFC Node located in Availability Zone 1"
           type: "String"
          WSFCNode1PrivateIP2:
           default: "10.0.0.101"
           description: "Secondary private IP for WSFC cluster on first WSFC Node"
           type: "String"
          WSFCNode1PrivateIP3: 
           default: "10.0.0.102"
           description: "Third private IP for SQL Server Network Name on first WSFC Node"
           type: "String"
          WSFCNode2NetBIOSName: 
           default: "WSFCNode2"
           description: "NetBIOS name of the second WSFC Node (up to 15 characters)"
           type: "String"
          WSFCNode2PrivateIP1:
           default: "10.0.32.100"
           description: "Primary private IP for the second WSFC Node located in Availability Zone 2"
           type: "String"
          WSFCNode2PrivateIP2: 
           default: "10.0.32.101"
           description: "Secondary private IP for WSFC cluster on second WSFC Node"
           type: "String"
          WSFCNode2PrivateIP3:
           default: "10.0.32.102"
           description: "Third private IP for SQL Server Network Name on second WSFC Node"
           type: "String"
          QSS3BucketName:
            default: "aws-quickstart"
            description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
            type: "String"
          QSS3KeyPrefix:
            default: "quickstart-microsoft-activedirectory/"
            description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
            type: "String"
          StackName:
            default: ""
            description: "Stack Name Input for cfn resource signal"
            type: "String"
          AutomationAssumeRole:
            default: ""
            description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
            type: "String"
        mainSteps:
        - name: "wsfcnodesInstanceId"
          action: "aws:executeAwsApi"
          onFailure: "step:signalfailure"
          #nextStep:
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "{{WSFCNode1NetBIOSName}}","{{WSFCNode2NetBIOSName}}" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceIds
            Selector: "$.Reservations..Instances..InstanceId"
            Type: "StringList"
        - name: "wsfcnode1InstanceId"
          action: "aws:executeAwsApi"
          onFailure: "step:signalfailure"
          #nextStep:
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "{{WSFCNode1NetBIOSName}}" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations[0].Instances[0].InstanceId"
            Type: "String"
        - name: "wsfcnode2InstanceId"
          action: "aws:executeAwsApi"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "{{WSFCNode2NetBIOSName}}" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations[0].Instances[0].InstanceId"
            Type: "String"
        - name: "dc1InstanceId"
          action: "aws:executeAwsApi"
          onFailure: "step:signalfailure"
          #nextStep:
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "{{ADServer1NetBIOSName}}" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations[0].Instances[0].InstanceId"
            Type: "String"
        - name: "OSVersionBranch1"
          action: "aws:branch"
          inputs:
            Choices:
            - NextStep: CopyQSModule
              Variable: "{{OSVersion}}"
              StringEquals: "2016"
            - NextStep: 2012R2InstallWMF51
              Variable: "{{OSVersion}}"
              StringEquals: "2012R2"
        - name: "2012R2InstallWMF51"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Install-WMF51.ps1"}'
              commandLine: "./Install-WMF51.ps1"
        - name: "2012R2InstallDSC"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   Install-WindowsFeature -Name DSC-Service
                   Set-WSManQuickConfig
                   $PSVersion = $PSVersionTable.PSVersion.Major
                   if ($PSVersion -eq '4') {
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: "CopyQSModule"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip -LocalFile C:\cfn\modules\AWSQuickStart.zip
        - name: "UnzipQSModule"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1"}'
              commandLine: "./Unzip-Archive.ps1 -Source 'C:\\cfn\\modules\\AWSQuickStart.zip' -Destination 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\'"
        - name: "EnableCredSSP"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/EnableCredSsp.ps1 -LocalFile C:\cfn\scripts\EnableCredSsp.ps1
        - name: "EnableCredSSPReboot"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = Test-Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation'
                   if ($CredSSPEnabled -eq $false) {
                     C:\cfn\scripts\EnableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: "QSModuleStart"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   New-AWSQuickStartResourceSignal -Stack {{StackName}} -Resource SSMWaitCondition -Region {{global:REGION}}
        - name: "OSVersionBranch2"
          action: "aws:branch"
          inputs:
            Choices:
            - NextStep: CopyDriveLetterMapping
              Variable: "{{OSVersion}}"
              StringEquals: "2016"
            - NextStep: SetDns
              Variable: "{{OSVersion}}"
              StringEquals: "2012R2"
        - name: "CopyDriveLetterMapping"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}scripts/DriveLetterMappingConfig.json -LocalFile C:\ProgramData\Amazon\EC2-Windows\Launch\Config\DriveLetterMappingConfig.json
        - name: "InitializeDisk"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeDisks.ps1
        - name: "SetDns"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Set-Dns.ps1"}'
              commandLine: "./Set-Dns.ps1 -ns1 {{ADServer1PrivateIP}} -ns2 {{ADServer2PrivateIP}}"
        - name: "DomainJoin"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-ApplyDSCMofs"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              MofsToApply: "s3://{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/DomainJoin.mof"
              MofOperationMode: "Apply"
              AllowPSGalleryModuleSource: "True"
              RebootBehavior: "AfterMof"
        - name: "Installnetcore"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
            - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/Install-NETFrameworkCore.ps1"}'
              commandLine: "./Install-NETFrameworkCore.ps1"
        - name: "OpenWSFCPorts"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/OpenWSFCPorts.ps1"}'
              commandLine: "./OpenWSFCPorts.ps1"
        - name: "ByolAmiBranch"
          action: "aws:branch"
          inputs:
            Choices:
            - NextStep: CreateJob
              Variable: "{{AMIType}}"
              StringEquals: "PAYG"
            - NextStep: DownloadDKCELicense
              Variable: "{{AMIType}}"
              StringEquals: "BYOL"
        - name: "DownloadDKCELicense"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/DownloadDKCELicense.ps1"}'
              commandLine: "./DownloadDKCELicense.ps1 -SIOSLicenseKeyFtpURL \"{{SIOSLicenseKeyFtpURL}}\""
        - name: "CreateJob"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/CreateJob.ps1"}'
              commandLine: "./CreateJob.ps1 -JobName vol.D -JobDesc 'SQL Volume Protection' -SourceName {{WSFCNode1NetBIOSName}}.{{DomainDNSName}} -SourceIP {{WSFCNode1PrivateIP1}} -SourceVol D -TargetName {{WSFCNode2NetBIOSName}}.{{DomainDNSName}} -TargetIP {{WSFCNode2PrivateIP1}} -TargetVol D -SyncType S"
        - name: "CreateMirror"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/CreateMirror.ps1"}'
              commandLine: "./CreateMirror.ps1 -SourceIP {{WSFCNode1PrivateIP1}} -Volume D -TargetIP {{WSFCNode2PrivateIP1}} -SyncType S"
        - name: "dc1configureWSFCFileShare"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-ApplyDSCMofs"
            InstanceIds:
              - "{{dc1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              MofsToApply: "s3:{{QSS3BucketName}}:{{QSS3KeyPrefix}}scripts/WSFCFileServer.mof"
              MofOperationMode: "Apply"
              AllowPSGalleryModuleSource: "True"
              RebootBehavior: "Never"
        - name: "Node1WSFC"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-ApplyDSCMofs"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              MofsToApply: "s3:{{QSS3BucketName}}:{{QSS3KeyPrefix}}scripts/WSFCNode1.mof"
              MofOperationMode: "Apply"
              AllowPSGalleryModuleSource: "True"
              RebootBehavior: "AfterMof"
        - name: "Node2WSFC"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-ApplyDSCMofs"
            InstanceIds:
              - "{{wsfcnode2InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              MofsToApply: "s3:{{QSS3BucketName}}:{{QSS3KeyPrefix}}scripts/WSFCNode2.mof"
              MofOperationMode: "Apply"
              AllowPSGalleryModuleSource: "True"
              RebootBehavior: "AfterMof"
        - name: "WaitForCluster"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/WaitForCluster.ps1"}'
              commandLine: "./WaitForCluster.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode1NetBIOSName}}"
        - name: "RegisterClusterVolume"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/RegisterClusterVolume.ps1"}'
              commandLine: "./RegisterClusterVolume.ps1 -Volume D"
        - name: "InstallSQLBranch"
          action: "aws:branch"
          inputs:
            Choices:
            - NextStep: Node1InstallSQL
              Variable: "{{SQLServerVersion}}"
              StringEquals: "2014SP1"
            - NextStep: DisableCredSSP
              Variable: "{{SQLServerVersion}}"
              StringEquals: "None"
        - name: "Node1InstallSQL"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode1InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/InstallSQLEE.ps1"}'
              commandLine: "./InstallSQLEE.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}} -NetBIOSName {{WSFCNode1NetBIOSName}} -SQLServerClusterIP {{WSFCNode1PrivateIP3}} -ClusterSubnetCidr {{PrivateSubnet1CIDR}}"
        - name: "wsfcnode2SetFolderPermissions"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode2InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/Set-Folder-Permissions.ps1"}'
              commandLine: "./Set-Folder-Permissions.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -FileServerNetBIOSName {{ADServer1NetBIOSName}} -ClusterName {{ClusterName}}"
        - name: "WaitForClusterGroup"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode2InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/WaitForClusterGroup.ps1"}'
              commandLine: "./WaitForClusterGroup.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode2NetBIOSName}}"
        - name: "Node2InstallSQLEE"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{wsfcnode2InstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/InstallSQLEE-AddNode.ps1"}'
              commandLine: "./InstallSQLEE-AddNode.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}} -NetBIOSName {{WSFCNode2NetBIOSName}} -ClusterIPAddresses {{WSFCNode1PrivateIP3}},{{WSFCNode2PrivateIP3}} -ClusterSubnetCidrs {{PrivateSubnet1CIDR}},{{PrivateSubnet2CIDR}}"
        - name: "DisableCredSSP"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/DisableCredSsp.ps1 -LocalFile C:\cfn\scripts\DisableCredSsp.ps1
        - name: "DisableCredSSPReboot"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          #nextStep: 
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{wsfcnodesInstanceId.InstanceIds}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation' -Name AllowFreshCredentials -ErrorAction SilentlyContinue).AllowFreshCredentials
                   if ($CredSSPEnabled -eq 1) {
                     C:\cfn\scripts\DisableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        # Determines if CFN Needs to be Signaled or if Work flow should just end
        - name: "CFNSignalEnd"
          action: "aws:branch"
          inputs:
            Choices:
            - NextStep: signalsuccess
              Not: 
                Variable: "{{StackName}}"
                StringEquals: ""
            - NextStep: sleepend
              Variable: "{{StackName}}"
              StringEquals: ""
        # If all steps complete successfully signals CFN of Success
        - name: "signalsuccess"
          action: "aws:executeAwsApi"
          isEnd: True
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: SUCCESS
            UniqueId: "{{wsfcnode2InstanceId.InstanceId}}"
        # If CFN Signl Not Needed this sleep ends work flow
        - name: "sleepend"
          action: "aws:sleep"
          isEnd: True
          inputs:
            Duration: PT1S
        # If any steps fails signals CFN of Failure
        - name: "signalfailure"
          action: "aws:executeAwsApi"
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: FAILURE
            UniqueId: "{{wsfcnode2InstanceId.InstanceId}}"
  AWSQuickstartSIOSDKCERole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ssm:*
                Resource: '*'
          PolicyName: SIOS-SSM-AutomationExecution
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  SIOSSSMPassRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SIOS-SSM-PassRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}'
      Roles:
        - !Ref 'AWSQuickstartSIOSDKCERole'
  SQLSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: /quickstart/secrets/SIOS/DKCE/SQLServiceAccount
      Description: MS SQL Credentials for SIOS DATAKEEPER Quick Start
      SecretString: !Sub '{ "Username":"${DomainNetBIOSName}\\${SQLServiceAccount}", "Password":"${SQLServiceAccountPassword}" }'
  DomainAdminSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: /quickstart/secrets/SIOS/DKCE/DomainAdminUser
      Description: Domain Admin Secrets for SIOS DATAKEEPER Quick Start
      SecretString: !Sub '{ "Username" : "${DomainNetBIOSName}\\${DomainAdminUser}", "Password":"${DomainAdminPassword}" }'
  DomainDNSNameParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Domain DNS Name for SIOS DATAKEEPER Quick Start
      Name: /quickstart/SIOS/DKCE/DomainName
      Type: String
      Value: !Sub '${DomainDNSName}'
  DomainAdminUserParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Domain Admin User Name for SIOS DATAKEEPER Quick Start
      Name: /quickstart/SIOS/DKCE/DomainAdminUser
      Type: String
      Value: !Sub '${DomainNetBIOSName}\${DomainAdminUser}'
  SQLServiceAccountParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: SQL Service Account Name for SIOS DATAKEEPER Quick Start
      Name: /quickstart/SIOS/DKCE/SQLServiceAccount
      Type: String
      Value: !Sub '${DomainNetBIOSName}\${SQLServiceAccount}'
  ClusterNameParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: WSFC Cluster Name for SIOS DATAKEEPER Quick Start
      Name: /quickstart/SIOS/DKCE/ClusterName
      Type: String
      Value: !Sub '${ClusterName}'
  WSFCNode1PrivateIP2Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Primary private IP for the first WSFC Node
      Name: /quickstart/SIOS/DKCE/WSFCNode1PrivateIP2
      Type: String
      Value: !Sub '${WSFCNode1PrivateIP2}'
  WSFCNode2PrivateIP2Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Primary private IP for the second WSFC Node
      Name: /quickstart/SIOS/DKCE/WSFCNode2PrivateIP2
      Type: String
      Value: !Sub '${WSFCNode2PrivateIP2}'
  ShareNameParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Witness Share for Cluster in SIOS DATAKEEPER Quick Start
      Name: /quickstart/SIOS/DKCE/ShareName
      Type: String
      Value: !Sub '\\${ADServer1NetBIOSName}.{DomainDNSName}\witness'
  WSFCRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'SQLSecrets'
                  - !Ref 'DomainAdminSecrets'
          PolicyName: QS-SIOS-Secrets
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DomainDNSNameParam}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DomainAdminUserParam}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SQLServiceAccountParam}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterNameParam}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${WSFCNode1PrivateIP2Param}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${WSFCNode2PrivateIP2Param}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ShareNameParam}'
          PolicyName: QS-SIOS-SSM
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}'
          PolicyName: QS-SIOS-SSM-PassRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  WSFCProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: WSFCRole
    Properties:
      Roles:
        - !Ref 'WSFCRole'
      Path: /
  WSFCNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !If
          - OSVersionCondition
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2016BYOL
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2012R2BYOL
        - !If
          - OSVersionCondition
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2016
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2012R2
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCNode1InstanceType'
      EbsOptimized: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref 'PrivateSubnet1ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP1'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP2'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP3'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
            - !Ref 'SIOSDataKeeperSG'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCNode1NetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '127'
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref 'KeyPairName'
  WSFCNode2:
    Type: AWS::EC2::Instance
    DependsOn:
      - WSFCNode1
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !If
          - OSVersionCondition
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2016BYOL
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2012R2BYOL
        - !If
          - OSVersionCondition
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2016
          - !FindInMap
            - AWSAMIRegionMap
            - !Ref 'AWS::Region'
            - SDKCEWIN2012R2
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCNode2InstanceType'
      EbsOptimized: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref 'PrivateSubnet2ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP1'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP2'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP3'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
            - !Ref 'SIOSDataKeeperSG'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCNode2NetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '127'
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - 'Start-SSMAutomationExecution -DocumentName '
            - !Sub '"${AWSQuickstartSIOSDKCE}"'
            - ' -Parameter @{"AMIType"='
            - !Sub '"${AMIType}"'
            - ';"OSVersion"='
            - !Sub '"${OSVersion}"'
            - ';"ADServer1NetBIOSName"='
            - !Sub '"${ADServer1NetBIOSName}"'
            - ';"ADServer1PrivateIP"='
            - !Sub '"${ADServer1PrivateIP}"'
            - ';"ADServer2NetBIOSName"='
            - !Sub '"${ADServer2NetBIOSName}"'
            - ';"ADServer2PrivateIP"='
            - !Sub '"${ADServer2PrivateIP}"'
            - ';"DomainAdminPassword"='
            - !Sub '"${DomainAdminPassword}"'
            - ';"DomainAdminUser"='
            - !Sub '"${DomainAdminUser}"'
            - ';"DomainDNSName"='
            - !Sub '"${DomainDNSName}"'
            - ';"DomainNetBIOSName"='
            - !Sub '"${DomainNetBIOSName}"'
            - ';"PrivateSubnet1CIDR"='
            - !Sub '"${PrivateSubnet1CIDR}"'
            - ';"PrivateSubnet2CIDR"='
            - !Sub '"${PrivateSubnet2CIDR}"'
            - ';"SIOSLicenseKeyFtpURL"='
            - !Sub '"${SIOSLicenseKeyFtpURL}"'
            - ';"SQLServerVersion"='
            - !Sub '"${SQLServerVersion}"'
            - ';"SQLServiceAccount"='
            - !Sub '"${SQLServiceAccount}"'
            - ';"SQLServiceAccountPassword"='
            - !Sub '"${SQLServiceAccountPassword}"'
            - ';"ClusterName"='
            - !Sub '"${ClusterName}"'
            - ';"WSFCNode1NetBIOSName"='
            - !Sub '"${WSFCNode1NetBIOSName}"'
            - ';"WSFCNode1PrivateIP1"='
            - !Sub '"${WSFCNode1PrivateIP1}"'
            - ';"WSFCNode1PrivateIP2"='
            - !Sub '"${WSFCNode1PrivateIP2}"'
            - ';"WSFCNode1PrivateIP3"='
            - !Sub '"${WSFCNode1PrivateIP3}"'
            - ';"WSFCNode2NetBIOSName"='
            - !Sub '"${WSFCNode2NetBIOSName}"'
            - ';"WSFCNode2PrivateIP1"='
            - !Sub '"${WSFCNode2PrivateIP1}"'
            - ';"WSFCNode2PrivateIP2"='
            - !Sub '"${WSFCNode2PrivateIP2}"'
            - ';"WSFCNode2PrivateIP3"='
            - !Sub '"${WSFCNode2PrivateIP3}"'
            - ';"QSS3BucketName"='
            - !Sub '"${QSS3BucketName}"'
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"AutomationAssumeRole"='
            - !Sub '"arn:aws:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}"'
            - '}'
            - "\n"
            - "</powershell>\n"
  WSFCNode1Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume1Size'
      VolumeType: !Ref 'Volume1Type'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
  WSFCNode2Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume1Size'
      VolumeType: !Ref 'Volume1Type'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
  WSFCNode1Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume1'
  WSFCNode2Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume1'
  SSMWaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  SSMWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT300M
        Count: 1
    DependsOn: "WSFCNode2"
    Properties: 
      Handle: 
        Ref: "SSMWaitHandle"
      Timeout: "18000"
      Count: 1
  SIOSDataKeeperSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Replication node communication
      VpcId: !Ref 'VPCID'
  SIOSDataKeeperSGIngressTCP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: tcp
      FromPort: '137'
      ToPort: '139'
  SIOSDataKeeperSGIngressUDP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: udp
      FromPort: '137'
      ToPort: '138'
  SIOSDataKeeperSGIngressTCP139:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: tcp
      FromPort: '139'
      ToPort: '139'
  SIOSDataKeeperSGIngressTCP9999:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: tcp
      FromPort: '9999'
      ToPort: '9999'
  SIOSDataKeeperSGIngressTCP10003:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: tcp
      FromPort: '10000'
      ToPort: '10025'
  SIOSDataKeeperSGIngressTCP445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SIOSDataKeeperSG'
      SourceSecurityGroupId: !Ref 'SIOSDataKeeperSG'
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
  WSFCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable the WSFC and SQL AlwaysOn Availability Group communications
      VpcId: !Ref 'VPCID'
  WSFCSecurityGroupIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
  WSFCSecurityGroupIngressTcp135:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '135'
      ToPort: '135'
  WSFCSecurityGroupIngressTcp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '137'
      ToPort: '137'
  WSFCSecurityGroupIngressTcp445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
  WSFCSecurityGroupIngressTcp1433:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '1433'
      ToPort: '1434'
  WSFCSecurityGroupIngressTcp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '3343'
      ToPort: '3343'
  WSFCSecurityGroupIngressTcp5022:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '5022'
      ToPort: '5022'
  WSFCSecurityGroupIngressTcp5985:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '5985'
      ToPort: '5985'
  WSFCSecurityGroupIngressUdp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '137'
      ToPort: '137'
  WSFCSecurityGroupIngressUdp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '3343'
      ToPort: '3343'
  WSFCSecurityGroupIngressUdp1434:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '1434'
      ToPort: '1434'
  WSFCSecurityGroupIngressTcpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '49152'
      ToPort: '65535'
  WSFCSecurityGroupIngressUdpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '49152'
      ToPort: '65535'
  SQLServerAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: Allows access to SQL Servers
  WSFCClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQL Client access ports
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          SourceSecurityGroupId: !Ref 'SQLServerAccessSecurityGroup'
Outputs:
  DomainAdmin:
    Value: !Join
      - ''
      - - !Ref 'DomainNetBIOSName'
        - \
        - !Ref 'DomainAdminUser'
    Description: Domain administrator account
  LocalAdmin:
    Value: Administrator
    Description: Please retrieve Administrator password of the instance
  WSFCNode1NetBIOSName:
    Value: !Ref 'WSFCNode1NetBIOSName'
    Description: NetBIOS name of the 1st WSFC Node
  WSFCNode2NetBIOSName:
    Value: !Ref 'WSFCNode2NetBIOSName'
    Description: NetBIOS name of the 2nd WSFC Node
  SQLServerAccessSecurityGroup:
    Value: !Ref 'SQLServerAccessSecurityGroup'
    Description: Add instances that require access to SQL to this Security Group
